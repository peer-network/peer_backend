schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  getChatMessages(chatid: ID!): AddChatmessageResponse!
  setChatMessages(chatid: ID!, content: String!): AddChatmessageResponse!
}

type Query {
  hello: HelloResponse!
  searchUser(userid: ID, eMail: String, username: String, status: Int, verified: Int, ip: String, offset: Int, limit: Int): UserSearchResponse!
  listUsers(offset: Int, limit: Int): UserSearchResponse!
  getProfile(userid: ID, postLimit: Int): ProfileInfo!
  listFollowRelations(userid: ID, offset: Int, limit: Int): FollowRelationsResponse!
  listFriends(offset: Int, limit: Int): UserFriendsResponse!
  getUserInfo: UserInfoResponse!
  listBlockedUsers(offset: Int, limit: Int): BlockedUsersResponse!
  listPosts(filterBy: [PostFilterType!], IgnorList: IgnoreOption, sortBy: PostSortType, userid: ID, postid: ID, title: String, tag: String, from: Date, to: Date, offset: Int, limit: Int, commentOffset: Int, commentLimit: Int): PostListResponse!
  getPostInfo(postid: ID!): PostInfoResponse!
  getCommentInfo(commentId: ID!): CommentInfoResponse!
  listChildComments(parent: ID!, offset: Int, limit: Int): CommentResponse!
  listTags(offset: Int, limit: Int): TagSearchResponse!
  searchTags(tagName: String!, offset: Int, limit: Int): TagSearchResponse!
  getChat(chatid: ID!, messageOffset: Int, messageLimit: Int): ChatResponse!
  getallchats(sortBy: String, from: Date, to: Date, offset: Int, limit: Int, messageOffset: Int, messageLimit: Int): ChatResponse!
  readMessages(chatid: ID!, offset: Int, limit: Int): AddChatmessageResponse!
  dailyfreestatus: GetDailyResponse!
  listTodaysInteractions: StandardResponse!
  allfriends(offset: Int, limit: Int): AllUserFriends!
  balance: CurrentLiquidity!
  fetchwinslog(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  fetchpayslog(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  getpercentbeforetransaction(tokenAmount: Int!): StandardResponse!
  refreshmarketcap: StandardResponse!
  globalwins: DefaultResponse!
  gemster: StandardResponse!
  gemsters(day: DayFilterType!): GenericResponse!
  liquiditypool(userid: ID, postid: ID, fromid: ID, whereby: Int, offset: Int, limit: Int): GenericResponse!
  testingpool(offset: Int, limit: Int): GenericResponse!
  postcomments(postid: ID!, offset: Int, limit: Int): GenericResponse!
  dailygemstatus: StandardResponse!
  dailygemsresults(day: DayFilterType!): GenericResponse!
}

type Mutation {
  updateUsername(username: String!, password: String!): DefaultResponse!
  updateEmail(eMail: String!, password: String!): DefaultResponse!
  updatePassword(password: String!, expassword: String!): DefaultResponse!
  toggleProfilePrivacy: DefaultResponse!
  updateBio(biography: String!): DefaultResponse!
  updateProfileImage(img: String!): DefaultResponse!
  toggleUserFollowStatus(userid: ID!): FollowStatusResponse!
  toggleBlockUserStatus(userid: ID!): DefaultResponse!
  deleteAccount(password: String!): DefaultResponse!
  createChat(input: ChatInput!): AddChatResponse!
  updateChatInformations(input: UpdateChatInput!): AddChatResponse!
  addChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  removeChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  sendChatMessage(chatid: ID!, content: String!): AddChatmessageResponse!
  deleteChatMessage(chatid: ID!, messid: Int!): DefaultResponse!
  deleteChat(id: ID!): DefaultResponse!
  createChatFeed(input: FeedInput!): AddPostResponse!
  likeComment(commentId: ID!): DefaultResponse!
  reportComment(commentId: ID!): DefaultResponse!
  deletePost(id: ID!): DefaultResponse!
  createPost(action: PostType!, input: PostInput!): PostResponse!
  createComment(action: CommentsType!, postid: ID!, parentId: ID, content: String!): CommentResponse!
  resolvePostAction(action: PostActionType!, postid: ID!): DefaultResponse!
}

scalar Decimal
scalar DATEN
scalar Date
scalar TagList

enum PostActionType {
  LIKE
  DISLIKE
  REPORT
  VIEW
  SHARE
  SAVE
}

enum PostType {
  POST
}

enum CommentsType {
  COMMENT
}

enum ContentType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
}

enum PostFilterType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
  FOLLOWED
  FOLLOWER
}

enum IgnoreOption {
  YES
  NO
}

enum PostSortType {
  NEWEST
  TRENDING
  LIKES
  DISLIKES
  VIEWS
  COMMENTS
}

enum DayFilterType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

type GenericResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: DATEN
}

type StandardResponse {
  status: String!
  responseCode: String
  data: DATEN
}

type HelloResponse {
  currentUserId: ID
  userroles: Int
  currentVersion: String
  wikiLink: String
}


type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdAt: String
}

type UserLogWins {
  status: String
  counter: Int!
  responseCode: String
  data: [LogWins]
}

type GetDailyResponse {
  status: String!
  responseCode: String!
  data: [DailyFreeResponse]
}

type DailyFreeResponse {
  name: String!
  used: Int!
  available: Int!
}

type CurrentLiquidity {
  balance: Decimal
}

type UserInfoResponse {
  status: String!
  responseCode: String!
  data: UserInfo
}

type UserInfo {
  userid: ID!
  balance: Decimal!
  postCount: Int!
  blockedCount: Int!
  followerCount: Int!
  followedCount: Int!
  friendCount: Int!
  updatedAt: Date
}

type PostInfoResponse {
  status: String!
  responseCode: String!
  data: PostInfo
}

type PostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type CommentInfoResponse {
  status: String!
  responseCode: String!
  data: CommentInfo
}

type CommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type ChatResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [Chat!]
}

type Chat {
  id: ID!
  image: String!
  name: String!
  createdAt: Date
  updatedAt: Date
  chatMessages: [ChatMessage!]!
  chatParticipants: [ChatParticipant!]!
}

type ChatMessage {
  id: ID!
  senderId: ID!
  chatid: ID!
  content: String!
  createdAt: Date!
}

type ChatParticipant {
  userid: ID!
  img: String!
  username: String!
  slug: Int!
  participantRole: Int!
}

type FollowStatusResponse {
  status: String!
  responseCode: String
  isFollowing: Boolean
}

type ProfilePostMedia {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdAt: String
}

type DefaultResponse {
  status: String!
  responseCode: String
}

type AddPostResponse {
  status: String!
  responseCode: String
  data: Postinfo
}

type Postinfo {
  postid: ID!
  userid: ID!
  title: String!
  media: String!
  mediadescription: String!
  contenttype: String!
}

type AddChatResponse {
  status: String!
  responseCode: String
  data: Chatinfo
}

type Chatinfo {
  chatid: ID
}

type AddChatmessageResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [ChatMessageInfo]
}

type ChatMessageInfo {
  messid: ID
  chatid: ID
  userid: ID
  content: String
  createdAt: Date
}

type Userinforesponse {
  status: String!
  responseCode: String
  data: Userinfo
}

type Userinfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedAt: Date!
}

type UserFriendsResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [Userinfo]
}

type AllUserInfo {
  followerid: ID
  followername: String
  followedid: ID
  followedname: String
}

type AllUserFriends {
  status: String!
  counter: Int!
  responseCode: String
  data: [AllUserInfo]
}

type User {
  id: ID
  situation: String
  eMail: String
  username: String
  password: String
  status: Int
  verified: Int
  slug: Int
  roles_mask: Int
  ip: String
  img: String
  biography: String
  balance: Decimal
  createdAt: Date
  updatedAt: Date
}

type Profile {
  id: ID
  situation: String
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isFollowed: Boolean
  isFollowing: Boolean
  postCount: Int
  trendingScore: Int
  followedCount: Int
  followerCount: Int
  friendCount: Int
  blockedCount: Int
  imagePosts: [ProfilePostMedia!]
  textPosts: [ProfilePostMedia!]
  videoPosts: [ProfilePostMedia!]
  audioPosts: [ProfilePostMedia!]
}

type ProfileInfo {
  status: String
  responseCode: String
  data: Profile
}

type ProfileUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isFollowed: Boolean
  isFollowing: Boolean
}

type FollowRelations {
  followers: [ProfileUser!]
  following: [ProfileUser!]
}

type FollowRelationsResponse {
  status: String
  counter: Int!
  responseCode: String
  data: FollowRelations
}

type BlockedUser {
  userid: String
  img: String
  username: String
  slug: Int
}

type BlockedUsers {
  blockedByMe: [BlockedUser!]
  blockedByOthers: [BlockedUser!]
}

type BlockedUsersResponse {
  status: String
  counter: Int!
  responseCode: String
  data: BlockedUsers
}

type UserListResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [User]
}

type Tag {
  name: String!
}

type TagSearchResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [Tag]
}

type PostResponse {
  status: String!
  responseCode: String
  data: Post
}

type PostListResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [Post!]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
  createdAt: Date!
  likeCount: Int!
  viewScore: Int!
  commentCount: Int!
  dislikeCount: Int!
  trendingScore: Int!
  isLiked: Boolean!
  isViewed: Boolean!
  isReported: Boolean!
  isDisliked: Boolean!
  isSaved: Boolean!
  tags: TagList!
  user: ProfileUser!
  comments: [Comment!]!
}

type Comment {
  commentId: ID!
  userid: ID!
  postid: ID!
  parentId: ID
  content: String!
  createdAt: Date!
  likeCount: Int!
  replyCount: Int!
  isLiked: Boolean!
  user: ProfileUser!
}

type CommentResponse {
  status: String!
  counter: Int!
  responseCode: String
  data: [Comment]
}

input RegistrationInput {
  eMail: String!
  password: String!
  username: String!
}

input PostInput {
  title: String!
  mediadescription: String
  contenttype: ContentType!
  media: [String!]
  cover: [String!]
  tags: [String!]
}

input ChatInput {
  name: String!
  image: String
  recipients: [String!]!
}

input UpdateChatInput {
  chatid: ID!
  name: String
  image: String
}

input ChatParticipantsInput {
  chatid: ID!
  recipients: [String!]!
}

input FeedInput {
  feedId: ID!
  title: String!
  media: String!
  mediadescription: String
  contenttype: String!
}
