schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  getChatMessages(chatid: ID!): AddChatmessageResponse!
  setChatMessages(chatid: ID!, content: String!): AddChatmessageResponse!
}

type Query {
  hello: HelloResponse!
  searchUser(userid: ID,contentFilterBy: ContentFilterType, email: String, username: String, status: Int, verified: Int, ip: String, offset: Int, limit: Int): UserListResponse!
  listUsers(contentFilterBy: ContentFilterType, offset: Int, limit: Int): UserListResponse!
  getProfile(userid: ID,contentFilterBy: ContentFilterType, postLimit: Int): ProfileInfo!
  listFollowRelations(contentFilterBy: ContentFilterType,userid: ID, offset: Int, limit: Int): FollowRelationsResponse!
  listFriends(contentFilterBy: ContentFilterType,offset: Int, limit: Int): UserFriendsResponse!
  getUserInfo: UserInfoResponse!
  listBlockedUsers(offset: Int, limit: Int): BlockedUsersResponse!
  listPosts(filterBy: [PostFilterType!], contentFilterBy: ContentFilterType, IgnorList: IgnoreOption, sortBy: PostSortType, userid: ID, postid: ID, title: String, tag: String, from: Date, to: Date, offset: Int, limit: Int, commentOffset: Int, commentLimit: Int): PostListResponse!
  getPostInfo(postid: ID!): PostInfoResponse!
  getCommentInfo(commentId: ID!): CommentInfoResponse!
  listChildComments(parent: ID!, offset: Int, limit: Int): CommentResponse!
  listTags(offset: Int, limit: Int): TagSearchResponse!
  searchTags(tagName: String!, offset: Int, limit: Int): TagSearchResponse!
  getChat(chatid: ID!, messageOffset: Int, messageLimit: Int): ChatResponse!
  listChats(sortBy: String, from: Date, to: Date, offset: Int, limit: Int, messageOffset: Int, messageLimit: Int): ChatResponse!
  listChatMessages(chatid: ID!, offset: Int, limit: Int): AddChatmessageResponse!
  getDailyFreeStatus: GetDailyResponse!
  listTodaysInteractions: ListTodaysInteractionsResponse!
  allfriends(offset: Int, limit: Int): AllUserFriends!
  balance: CurrentLiquidity!
  listWinLogs(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  listPaymentLogs(day: DayFilterType!, offset: Int, limit: Int): UserLogWins!
  getpercentbeforetransaction(tokenAmount: Int!): PercentBeforeTransactionResponse!
  refreshmarketcap: RefreshMarketCapResponse!
  globalwins: DefaultResponse!
  gemster: GemsterResponse!
  gemsters(day: DayFilterType!): GemstersResponse!
  liquiditypool(userid: ID, postid: ID, fromid: ID, whereby: Int, offset: Int, limit: Int): LiquidityPoolResponse!
  testingpool(offset: Int, limit: Int): TestingPoolResponse!
  postcomments(postid: ID!, offset: Int, limit: Int): PostCommentsResponse!
  dailygemstatus: DailyGemStatusResponse!
  dailygemsresults(day: DayFilterType!): DailyGemsResultsResponse!
  getReferralInfo: ReferralInfoResponse!
  referralList(offset: Int, limit: Int): ReferralListResponse!
  advertisementHistory(filter: AdvertisementHistoryFilter, sort: AdvertisementSort, offset: Int, limit: Int): ListedAdvertisementData!
}

type Mutation {
  updateUsername(username: String!, password: String!): DefaultResponse!
  updateEmail(email: String!, password: String!): DefaultResponse!
  updatePassword(password: String!, expassword: String!): DefaultResponse!
  updateBio(biography: String!): DefaultResponse!
  updateProfileImage(img: String!): DefaultResponse!
  toggleUserFollowStatus(userid: ID!): FollowStatusResponse!
  toggleBlockUserStatus(userid: ID!): DefaultResponse!
  deleteAccount(password: String!): DefaultResponse!
  createChat(input: ChatInput!): AddChatResponse!
  updateChatInformations(input: UpdateChatInput!): AddChatResponse!
  addChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  removeChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  sendChatMessage(chatid: ID!, content: String!): AddChatmessageResponse!
  deleteChatMessage(chatid: ID!, messid: Int!): DefaultResponse!
  deleteChat(id: ID!): DefaultResponse!
  createChatFeed(input: FeedInput!): AddPostResponse!
  likeComment(commentid: ID!): DefaultResponse!
  reportComment(commentid: ID!): DefaultResponse!
  deletePost(id: ID!): DefaultResponse!
  createPost(action: PostType!, input: PostInput!): PostResponse!
  createComment(action: CommentType!, postid: ID!, parentid: ID, content: String!): CommentResponse!
  resolvePostAction(action: PostActionType!, postid: ID!): DefaultResponse!
  resolveTransfer(recipient: ID!, numberoftokens: Int!): DefaultResponse!
  reportUser(userid: ID!): DefaultResponse!
  advertisePostBasic(postid: ID!, startday: Date!, durationInDays: AdDuration!, advertisePlan: AdvertisementBasicPlan!): ListAdvertisementData!
  advertisePostPinned(postid: ID!, advertisePlan: AdvertisementPinnedPlan!, forceUpdate: Boolean): ListAdvertisementData!
}

scalar Decimal
scalar Date

enum AdDuration {
  ONE_DAY
  TWO_DAYS
  THREE_DAYS
  FOUR_DAYS
  FIVE_DAYS
  SIX_DAYS
  SEVEN_DAYS
}

enum AdvertisementBasicPlan {
  BASIC
}

enum AdvertisementPinnedPlan {
  PINNED
}

enum PostActionType {
  LIKE
  DISLIKE
  REPORT
  VIEW
  SHARE
  SAVE
}

enum PostType {
  POST
}

enum CommentType {
  COMMENT
}

enum ContentFilterType {
  MYGRANDMALIKES
}

type ReferralInfoResponse {
  status: String
  ResponseCode: String
  referralUuid: ID
  referralLink: String
}
type ReferralListResponse {
  status: String!
  counter: Int!
  ResponseCode: String!
  affectedRows: ReferralUsers!
}
type ReferralUsers {
  invitedBy: ProfileUser
  iInvited: [ProfileUser!]!
}

enum ContentType {
  image
  audio
  video
  text
}

enum PostFilterType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
  FOLLOWER
  FOLLOWED
}

enum IgnoreOption {
  YES
  NO
}

enum PostSortType {
  NEWEST
  OLDEST
  TRENDING
  LIKES
  DISLIKES
  VIEWS
  COMMENTS
  FOLLOWER
  FOLLOWED
  RELEVANT
}

enum DayFilterType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

enum AdvertisementType {
  PINNED
  BASIC
}

enum AdvertisementSort {
  NEWEST
  OLDEST
  BIGGEST_COST
  SMALLEST_COST
}

type Advertisement {
  id: ID!
  createdAt: Date!
  type: String!
  creatorId: ID!
  postId: ID!
  timeframeStart: Date!
  timeframeEnd: Date!
  totalTokenCost: Float!
  totalEuroCost: Float!
  gemsEarned: Float!
  views: Int!
}

type AdvertisementHistoryStats {
  totalTokenSpent: Float!
  totalEuroSpent: Float!
  totalAds: Int!
  totalGemsEarned: Int!
}

type AdvertisementHistoryResult {
  stats: AdvertisementHistoryStats
  advertisements: [Advertisement]
}
  
type ListAdvertisementData {
  status: String!
  ResponseCode: String
  affectedRows: [Advertisement]
}

type ListedAdvertisementData {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: AdvertisementHistoryResult
}

type ListTodaysInteractionsResponse {
  status: String!
  ResponseCode: String
  affectedRows: TodaysInteractionsData
}

type TodaysInteractionsData {
  totalInteractions: Decimal
  totalScore: Decimal
  totalDetails: TodaysInteractionsDetailsData
}

type TodaysInteractionsDetailsData {
  views: Decimal
  likes: Decimal
  dislikes: Decimal
  comments: Decimal
  viewsScore: Decimal
  likesScore: Decimal
  dislikesScore: Decimal
  commentsScore: Decimal
}

type GemstersResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: GemstersData
}

type GemstersData {
  winStatus: WinStatus
  userStatus: [GemstersUserStatus] 
}

type WinStatus {
  totalGems: Decimal
  gemsintoken: Decimal
  bestatigung: Decimal
}

type GemstersUserStatus {
  userid: ID,
  gems: Decimal,
  tokens: Decimal,
  percentage: Decimal,
  details: [GemstersUserStatusDetails]
}

type GemstersUserStatusDetails {
  gemid: ID,
  userid: ID,
  postid: ID,
  fromid: ID,
  gems: Decimal,
  numbers: Decimal,
  whereby: Decimal,
  createdat: Date
}

type GemsterResponse {
  status: String!
  ResponseCode: String
  affectedRows: DailyGemStatusData
}

type LiquidityPoolResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: LiquidityPoolData
}

type LiquidityPoolData {
  overallTotalNumbers: Decimal
  overallTotalNumbersq: Decimal
  posts: [LiquidityPoolPostData]
}

type LiquidityPoolPostData {
  postid: ID
  totalNumbers: Decimal
  totalNumbersq: Decimal
  transactionCount: Decimal
}

type TestingPoolResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: LiquidityPoolData
}

type PostCommentsResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [PostCommentsData]
}

type PostCommentsData {
  commentid: ID
  userid: ID
  postid: ID
  parentid: ID
  content: String
  createdat: Date
  amountlikes: Decimal
  isliked: Boolean
  user: BasicUserInfo
  subcomments: [PostSubCommentsData]
}

type PostSubCommentsData {
  commentid: ID
  userid: ID
  postid: ID
  parentid: ID
  content: String
  createdat: Date
  amountlikes: Decimal
  amountreplies: Decimal,
  isliked: Boolean
  user: BasicUserInfo
}

type PercentBeforeTransactionResponse {
  status: String!
  ResponseCode: String
  affectedRows: PercentBeforeTransactionData
}

type PercentBeforeTransactionData {
  inviterId: ID
  tosend: Decimal
  percentTransferred: Decimal
}

type RefreshMarketCapResponse {
  status: String!
  ResponseCode: String
  affectedRows: RefreshMarketCapData
}

type RefreshMarketCapData {
  NumberOfTokens: Decimal
  NumberOfGems: Decimal
  coverage: Decimal
  TokenPrice: Decimal
  GemsPrice: Decimal
}

type DailyGemStatusResponse {
  status: String!
  ResponseCode: String
  affectedRows: DailyGemStatusData
}

type DailyGemsResultsResponse {
  status: String!
  ResponseCode: String
  affectedRows: DailyGemsResultsData
}

type DailyGemStatusData {
  d0: Decimal
  d1: Decimal
  d2: Decimal
  d3: Decimal
  d4: Decimal
  d5: Decimal
  w0: Decimal
  m0: Decimal
  y0: Decimal
}

type DailyGemsResultsData {
  data: [DailyGemsResultsUserData],
  totalGems: Decimal
}

type DailyGemsResultsUserData {
  userid: ID
  pkey: ID
  gems: Decimal
}

type HelloResponse {
  currentuserid: ID
  userroles: Int
  currentVersion: String
  wikiLink: String
  lastMergedPullRequestNumber: String
}


type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdat: String
}

type UserLogWins {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: [LogWins]
}

type GetDailyResponse {
  status: String!
  ResponseCode: String!
  affectedRows: [DailyFreeResponse]
}

type DailyFreeResponse {
  name: String!
  used: Int!
  available: Int!
}

type CurrentLiquidity {
  status: String!
  ResponseCode: String!
  currentliquidity: Decimal
}

type UserInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: UserInfo
}

type UserInfo {
  userid: ID!
  liquidity: Decimal!
  amountposts: Int!
  amountblocked: Int!
  amountfollower: Int!
  amountfollowed: Int!
  amountfriends: Int!
  invited: ID!
  updatedat: Date
}

type PostInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: PostInfo
}

type PostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type CommentInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: CommentInfo
}

type CommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type ChatResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Chat!]
}

type Chat {
  id: ID!
  image: String!
  name: String!
  createdat: Date
  updatedat: Date
  chatmessages: [ChatMessage!]!
  chatparticipants: [ChatParticipant!]!
}

type ChatMessage {
  id: ID!
  senderid: ID!
  chatid: ID!
  content: String!
  createdat: Date!
}

type ChatParticipant {
  userid: ID!
  img: String!
  username: String!
  slug: Int!
  hasaccess: Int!
}

type FollowStatusResponse {
  status: String!
  ResponseCode: String
  isfollowing: Boolean
}

type ProfilePostMedia {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdat: String
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type AddPostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Postinfo
}

type Postinfo {
  postid: ID!
  userid: ID!
  title: String!
  media: String!
  mediadescription: String!
  contenttype: String!
}

type AddChatResponse {
  status: String!
  ResponseCode: String
  affectedRows: Chatinfo
}

type Chatinfo {
  chatid: ID
}

type AddChatmessageResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [ChatMessageInfo]
}

type ChatMessageInfo {
  messid: ID
  chatid: ID
  userid: ID
  content: String
  createdat: Date
}

type BasicUserInfoResponse {
  status: String!
  ResponseCode: String
  affectedRows: BasicUserInfo
}

type BasicUserInfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedat: Date!
}

type UserFriendsResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [BasicUserInfo]
}

type AllUserInfo {
  followerid: ID
  followername: String
  followedid: ID
  followedname: String
}

type AllUserFriends {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [AllUserInfo]
}

type User {
  id: ID
  situation: String
  email: String
  username: String
  password: String
  status: Int
  verified: Int
  slug: Int
  roles_mask: Int
  ip: String
  img: String
  biography: String
  liquidity: Decimal
  createdat: Date
  updatedat: Date
}

type Profile {
  id: ID
  situation: String
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isfollowed: Boolean
  isfollowing: Boolean
  amountposts: Int
  amounttrending: Int
  amountfollowed: Int
  amountfollower: Int
  amountfriends: Int
  amountblocked: Int
  imageposts: [ProfilePostMedia!]
  textposts: [ProfilePostMedia!]
  videoposts: [ProfilePostMedia!]
  audioposts: [ProfilePostMedia!]
}

type ProfileInfo {
  status: String
  ResponseCode: String
  affectedRows: Profile
}

type ProfileUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
  isfriend: Boolean
}

type FollowRelations {
  followers: [ProfileUser!]
  following: [ProfileUser!]
}

type FollowRelationsResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: FollowRelations
}

type BlockedUser {
  userid: String
  img: String
  username: String
  slug: Int
}

type BlockedUsers {
  iBlocked: [BlockedUser!]
  blockedBy: [BlockedUser!]
}

type BlockedUsersResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: BlockedUsers
}

type UserListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [User]
}

type Tag {
  name: String!
}

type TagSearchResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Tag]
}

type PostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Post
}

type PostListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Post!]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
  createdat: Date!
  amountlikes: Int!
  amountviews: Int!
  amountcomments: Int!
  amountdislikes: Int!
  amounttrending: Int!
  isliked: Boolean!
  isviewed: Boolean!
  isreported: Boolean!
  isdisliked: Boolean!
  issaved: Boolean!
  type: String!
  tags: [String]!
  user: ProfileUser!
  comments: [Comment!]!
}

type Comment {
  commentid: ID!
  userid: ID!
  postid: ID!
  parentid: ID
  content: String!
  createdat: Date!
  amountlikes: Int!
  amountreplies: Int!
  isliked: Boolean!
  user: ProfileUser!
}

type CommentResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Comment]
}

input RegistrationInput {
  email: String!
  password: String!
  username: String!
}

input PostInput {
  title: String!
  mediadescription: String
  contenttype: ContentType!
  media: [String!]
  cover: [String!]
  tags: [String!]
}

input ChatInput {
  name: String!
  image: String
  recipients: [String!]!
}

input UpdateChatInput {
  chatid: ID!
  name: String
  image: String
}

input ChatParticipantsInput {
  chatid: ID!
  recipients: [String!]!
}

input FeedInput {
  feedid: ID!
  title: String!
  media: String!
  mediadescription: String
  contenttype: String!
}

input AdvertisementHistoryFilter {
  from: Date
  to: Date
  type: AdvertisementType
  advertisementId: ID
  postId: ID
  userId: ID
}