extend type Query {
  searchUserAdmin(userid: ID,contentFilterBy: ContentFilterType,email: String,username: String,status: Int,verified: Int,ip: String,offset: Int,limit: Int): UserListResponse! @deprecated(reason: "Use listUsersAdminV2.")
  listUsersAdminV2(contentFilterBy: ContentFilterType,userid: ID,email: String,username: String,status: Int,verified: Int,ip: String,offset: Int,limit: Int): UserListResponse!
  allfriends(offset: Int, limit: Int): AllUserFriends!
  gemster: GemsterResponse!
  postcomments(postid: ID!, offset: Int, limit: Int): PostCommentsResponse!
  dailygemstatus: DailyGemStatusResponse!
  dailygemsresults(day: DayFilterType!): DailyGemsResultsResponse!
  getLiquidityPoolHistory(offset: Int, limit: Int): LiquidityPoolHistoryResponse!
  getTokenPrice: TokenPriceResponse!
  logWinsPaidActionForMarchApril: DefaultResponse
  logWinMigration: DefaultResponse
  logWinMigration02: DefaultResponse
  logWinMigration03: DefaultResponse
  logWinMigration04: DefaultResponse
  logWinMigration05: DefaultResponse
  logWinMigrationWalletUpdate: DefaultResponse
  logWinMigrationWalletNegativeToZero: DefaultResponse
}

extend type Mutation {
  globalwins: DefaultResponse!
  gemsters(day: DayFilterType!): GemstersResponse!
  addLiquidity(amountToken: Decimal!, amountBtc: Decimal!): AddLiquidityResponse!
  updateSwapTranStatus(transactionId: ID!): UpdateSwapResponse!
}

extend type HelloResponse {
  userroles: Int
}

extend type User {
  situation: String
  email: String
  verified: Int
  roles_mask: Int
  ip: String
  liquidity: Decimal
}