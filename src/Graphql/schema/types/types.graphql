type AdvertisementPost {
  post: Post!
  advertisement: AdvCreator!
}

type AdvCreator {
  advertisementid: ID!
  postid: ID!
  advertisementtype: AdvertisementType!
  startdate: Date!
  enddate: Date!
  createdat: Date!
  user: ProfileUser!
}

# merged alt + neu
type Advertisement {
  id: ID!
  createdAt: Date!
  type: AdvertisementType!
  timeframeStart: Date!
  timeframeEnd: Date!
  totalTokenCost: Float!
  totalEuroCost: Float!
  gemsEarned: Float!
  amountLikes: Int!
  amountViews: Int!
  amountComments: Int!
  amountDislikes: Int!
  amountReports: Int!
  user: ProfileUser!
  post: Post!
}

type TotalAdvertisementHistoryStats { 
  tokenSpent: Float!
  euroSpent: Float!
  amountAds: Int!
  gemsEarned: Float!
  amountLikes: Int!
  amountViews: Int! 
  amountComments: Int!
  amountDislikes: Int!
  amountReports: Int!
}

type AdvertisementHistoryResult {
  stats: TotalAdvertisementHistoryStats
  advertisements: [Advertisement]
}

type ListedAdvertisementData {
  status: String!
  ResponseCode: String
  affectedRows: AdvertisementHistoryResult
}

type AdvertisementRow {
  id: ID!
  createdAt: Date!
  type: AdvertisementType!
  timeframeStart: Date!
  timeframeEnd: Date!
  totalTokenCost: Float!
  totalEuroCost: Float!
}

type ContactusResponsePayload {
  msgid: Decimal,
  email: String,
  name: String,
  message: String,
  ip: String,
  createdat: String
}

type ListAdvertisementData {
  status: String!
  ResponseCode: String
  affectedRows: [AdvertisementRow]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
  createdat: Date!
  amountreports: Int!
  amountlikes: Int!
  amountviews: Int!
  amountcomments: Int!
  amountdislikes: Int!
  amounttrending: Int!
  isliked: Boolean!
  isviewed: Boolean!
  isreported: Boolean!
  isdisliked: Boolean!
  issaved: Boolean!
  tags: [String]!
  url: String!
  user: ProfileUser!
  comments: [Comment!]!
}

type Comment {
  commentid: ID!
  userid: ID!
  postid: ID! 
  parentid: ID
  content: String!
  createdat: Date!
  amountlikes: Int!
  amountreplies: Int!
  amountreports: Int!
  isliked: Boolean!
  user: ProfileUser!
}

type ProfileUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
  isfriend: Boolean
}

type ReferralInfo {
  uid: String
  username: String
  slug: String
  img: String
}

type UserPreferences {
  contentFilteringSeverityLevel: ContentFilterType
  onboardingsWereShown: [OnboardingType!]!
}

type Transaction {
  transactionid: String!
  operationid: String!
  transactiontype: String!
  senderid: String!
  recipientid: String!
  tokenamount: Decimal!
  transferaction: String!
  message: String!
  createdat: String!
}

type TransferToken {
  tokenSend: Decimal
  tokensSubstractedFromWallet: Decimal
  createdat: String
}

type TodaysInteractionsDetailsData {
  views: Decimal
  likes: Decimal
  dislikes: Decimal
  comments: Decimal
  viewsScore: Decimal
  likesScore: Decimal
  dislikesScore: Decimal
  commentsScore: Decimal
}

type TodaysInteractionsData {
  totalInteractions: Decimal
  totalScore: Decimal
  totalDetails: TodaysInteractionsDetailsData
}

type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdat: String
}

type UserLogWins {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: [LogWins]
  meta: DefaultResponse
}

type UserInfo {
  userid: ID!
  liquidity: Decimal!
  amountposts: Int!
  amountreports: Int!
  amountblocked: Int!
  amountfollower: Int!
  amountfollowed: Int!
  amountfriends: Int!
  invited: ID!
  updatedat: Date
  userPreferences: UserPreferences
}

type CommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type Profile {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isfollowed: Boolean
  isfollowing: Boolean
  role: String
  amountposts: Int
  amounttrending: Int
  amountfollowed: Int
  amountfollower: Int
  amountfriends: Int
  amountblocked: Int
  amountreports: Int
  imageposts: [ProfilePostMedia!] @deprecated(reason: "use listPosts by userid")
  textposts: [ProfilePostMedia!] @deprecated(reason: "use listPosts by userid")
  videoposts: [ProfilePostMedia!] @deprecated(reason: "use listPosts by userid")
  audioposts: [ProfilePostMedia!] @deprecated(reason: "use listPosts by userid")
}

type ProfileInfo {
  status: String
  ResponseCode: String
  affectedRows: Profile
}

type FollowRelations {
  followers: [ProfileUser!]
  following: [ProfileUser!]
}

type BlockedUser {
  userid: String
  img: String
  username: String
  slug: Int
}

type BlockedUsers {
  iBlocked: [BlockedUser!]
  blockedBy: [BlockedUser!]
}

type Tag {
  name: String!
}

type ReferralUsers {
  invitedBy: ProfileUser
  iInvited: [ProfileUser!]!
}

type ActionPriceResult {
  postPrice: Float!
  likePrice: Float!
  dislikePrice: Float!
  commentPrice: Float!
}

type ActionGemsReturns {
  viewGemsReturn: Float!
  likeGemsReturn: Float!
  dislikeGemsReturn: Float!
  commentGemsReturn: Float!
}

type MintingData {
  tokensMintedYesterday: Float!
}

type CurrentLiquidity {
  status: String
  ResponseCode: String
  meta: DefaultResponse
  currentliquidity: Decimal
}

type DailyGemStatusData {
  d0: Decimal
  d1: Decimal
  d2: Decimal
  d3: Decimal
  d4: Decimal
  d5: Decimal
  w0: Decimal
  m0: Decimal
  y0: Decimal
}

type DailyGemsResultsData {
  data: [DailyGemsResultsUserData]
  totalGems: Decimal
}

type DailyGemsResultsUserData {
  userid: ID
  pkey: ID
  gems: Decimal
}

type GemstersData {
  winStatus: WinStatus
  userStatus: [GemstersUserStatus]
}

type WinStatus {
  totalGems: Decimal
  gemsintoken: Decimal
  bestatigung: Decimal
}

type GemstersUserStatus {
  userid: ID
  gems: Decimal
  tokens: Decimal
  percentage: Decimal
  details: [GemstersUserStatusDetails]
}

type GemstersUserStatusDetails {
  gemid: ID
  userid: ID
  postid: ID
  fromid: ID
  gems: Decimal
  numbers: Decimal
  whereby: Decimal
  createdat: Date
}

type LiquidityPoolData {
  overallTotalNumbers: Decimal
  overallTotalNumbersq: Decimal
  posts: [LiquidityPoolPostData]
}

type LiquidityPoolPostData {
  postid: ID
  totalNumbers: Decimal
  totalNumbersq: Decimal
  transactionCount: Decimal
}

type ProfilePostMedia {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdat: String
}

type PostCommentsData {
  commentid: ID
  userid: ID
  postid: ID
  parentid: ID
  content: String
  createdat: Date
  amountlikes: Decimal
  isliked: Boolean
  user: BasicUserInfo
  subcomments: [PostSubCommentsData]
}

type PostSubCommentsData {
  commentid: ID
  userid: ID
  postid: ID
  parentid: ID
  content: String
  createdat: Date
  amountlikes: Decimal
  amountreplies: Decimal,
  isliked: Boolean
  user: BasicUserInfo
}

type BasicUserInfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedat: Date!
}

type User {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  createdat: Date
  updatedat: Date
}

type PercentBeforeTransactionData {
  inviterId: ID
  tosend: Decimal
  percentTransferred: Decimal
}

type RefreshMarketCapData {
  NumberOfTokens: Decimal
  NumberOfGems: Decimal
  coverage: Decimal
  TokenPrice: Decimal
  GemsPrice: Decimal
}

type PostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type AllUserInfo {
  followerid: ID
  followername: String
  followedid: ID
  followedname: String
}

type AllUserFriends {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [AllUserInfo]
}

type ModerationStatsResponse {
  status: String!
  ResponseCode: String
  affectedRows: ModerationStats
  meta: DefaultResponse
}
type ModerationStats {
  AmountAwaitingReview: Int!
  AmountHidden: Int!
  AmountRestored: Int!
  AmountIllegal: Int!
}
type ModerationItemListResponse {
  status: String!
  ResponseCode: String
  affectedRows: [ModerationItem!]!
  meta: DefaultResponse
}
type ModerationItem {
  targetContentId: ID!
  targettype: String!
  reportscount: Int!
  status: String!
  createdat: String!
  targetcontent: TargetContent!
  reporters: [BasicUserInfo!]!
}

type TargetContent {
  post: Post
  comment: Comment
  user: BasicUserInfo
}