schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  getChatMessages(chatid: ID!): AddChatmessageResponse!
  setChatMessages(chatid: ID!, content: String!): AddChatmessageResponse!
}

type Query {
  "Returns basic service info (e.g., current user ID and version)"
  hello: HelloResponse!

  "Search for users using filters like username or user ID"
  searchUser(input: SearchUserInput!): UserListResponse!

  "List all users with pagination support"
  listUsers(input: PaginationInput!): UserListResponse!

  "Retrieve a user's public profile and posts"
  getProfile(input: GetProfileInput!): ProfileInfo!

  "List followers and followings of a user with pagination"
  listFollowRelations(input: ListFollowRelationsInput!): FollowRelationsResponse!

  "List friends of the current user with pagination"
  listFriends(input: PaginationInput!): UserFriendsResponse!

  "Returns detailed user stats for the currently logged-in user"
  getUserInfo: UserInfoResponse!

  "List users blocked by or blocking the current user"
  listBlockedUsers(input: PaginationInput!): BlockedUsersResponse!

  "List posts using filters like tags, sort type, date range, and pagination"
  listPosts(input: ListPostsInput!): PostListResponse!

  "Get engagement summary of a specific post"
  getPostInfo(postid: ID!): PostInfoResponse!

  "Get engagement summary of a specific comment"
  getCommentInfo(commentId: ID!): CommentInfoResponse!

  "List child comments of a given comment with pagination"
  listChildComments(input: ListChildCommentsInput!): CommentResponse!

  "List all tags with pagination"
  listTags(input: PaginationInput!): TagSearchResponse!

  "Search for tags by name with pagination"
  searchTags(input: SearchTagsInput!): TagSearchResponse!

  "Get detailed info about a specific chat, including messages and participants"
  getChat(input: GetChatInput!): ChatResponse!

  "List all chats of the current user with pagination and filters"
  listChats(input: ListChatsInput!): ChatResponse!

  "List messages of a chat with pagination"
  listChatMessages(input: ListChatMessagesInput!): AddChatmessageResponse!

  "Check daily free interaction quota (e.g., free posts or actions)"
  getDailyFreeStatus: GetDailyResponse!

  "Get current token liquidity balance"
  balance: CurrentLiquidity!

  "List the user's win logs by day filter and pagination"
  listWinLogs(input: DayPaginatedInput!): UserLogWins!

  "List the user's token transfer logs by day filter and pagination"
  listPaymentLogs(input: DayPaginatedInput!): UserLogWins!

  "Returns a summary of today's interactions"
  listTodaysInteractions: StandardResponse!
}


type Mutation {
  updateUsername(username: String!, password: String!): DefaultResponse!
  updateEmail(email: String!, password: String!): DefaultResponse!
  updatePassword(password: String!, expassword: String!): DefaultResponse!
  updateBio(biography: String!): DefaultResponse!
  updateProfileImage(img: String!): DefaultResponse!
  toggleUserFollowStatus(userid: ID!): FollowStatusResponse!
  toggleBlockUserStatus(userid: ID!): DefaultResponse!
  deleteAccount(password: String!): DefaultResponse!
  createChat(input: ChatInput!): AddChatResponse!
  updateChatInformations(input: UpdateChatInput!): AddChatResponse!
  addChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  removeChatParticipants(input: ChatParticipantsInput!): AddChatResponse!
  sendChatMessage(chatid: ID!, content: String!): AddChatmessageResponse!
  deleteChatMessage(chatid: ID!, messid: Int!): DefaultResponse!
  deleteChat(id: ID!): DefaultResponse!
  createChatFeed(input: FeedInput!): AddPostResponse!
  likeComment(commentid: ID!): DefaultResponse!
  reportComment(commentid: ID!): DefaultResponse!
  deletePost(id: ID!): DefaultResponse!
  createPost(action: PostType!, input: PostInput!): PostResponse!
  createComment(action: CommentType!, postid: ID!, parentid: ID, content: String!): CommentResponse!
  resolvePostAction(action: PostActionType!, postid: ID!): DefaultResponse!
  resolveTransfer(recipient: ID!, numberoftokens: Int!): DefaultResponse!
}

scalar Decimal
scalar DATEN
scalar Date
scalar TagList

enum PostActionType {
  LIKE
  DISLIKE
  REPORT
  VIEW
  SHARE
  SAVE
}

enum PostType {
  POST
}

enum CommentType {
  COMMENT
}

enum ContentType {
  image
  audio
  video
  text
}

enum PostFilterType {
  IMAGE
  AUDIO
  VIDEO
  TEXT
  FOLLOWED
  FOLLOWER
}

enum IgnoreOption {
  YES
  NO
}

enum PostSortType {
  NEWEST
  TRENDING
  LIKES
  DISLIKES
  VIEWS
  COMMENTS
}

enum DayFilterType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

type StandardResponse {
  status: String!
  ResponseCode: String
  affectedRows: DATEN
}

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
}

type LogWins {
  from: String
  token: String
  userid: String
  postid: String
  action: String
  numbers: Decimal
  createdat: String
}

type UserLogWins {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: [LogWins]
}

type GetDailyResponse {
  status: String!
  ResponseCode: String!
  affectedRows: [DailyFreeResponse]
}

type DailyFreeResponse {
  name: String!
  used: Int!
  available: Int!
}

type CurrentLiquidity {
  status: String!
  ResponseCode: String!
  currentliquidity: Decimal
}

type UserInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: UserInfo
}

type UserInfo {
  userid: ID!
  liquidity: Decimal!
  amountposts: Int!
  amountblocked: Int!
  amountfollower: Int!
  amountfollowed: Int!
  amountfriends: Int!
  updatedat: Date
}

type PostInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: PostInfo
}

type PostInfo {
  likes: Int!
  dislikes: Int!
  reports: Int!
  views: Int!
  saves: Int!
  shares: Int!
  comments: Int!
}

type CommentInfoResponse {
  status: String!
  ResponseCode: String!
  affectedRows: CommentInfo
}

type CommentInfo {
  likes: Int!
  reports: Int!
  comments: Int!
}

type ChatResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Chat!]
}

type Chat {
  id: ID!
  image: String!
  name: String!
  createdat: Date
  updatedat: Date
  chatmessages: [ChatMessage!]!
  chatparticipants: [ChatParticipant!]!
}

type ChatMessage {
  id: ID!
  senderid: ID!
  chatid: ID!
  content: String!
  createdat: Date!
}

type ChatParticipant {
  userid: ID!
  img: String!
  username: String!
  slug: Int!
  hasaccess: Int!
}

type FollowStatusResponse {
  status: String!
  ResponseCode: String
  isfollowing: Boolean
}

type ProfilePostMedia {
  id: ID!
  title: String
  contenttype: String!
  media: String!
  createdat: String
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type AddPostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Postinfo
}

type Postinfo {
  postid: ID!
  userid: ID!
  title: String!
  media: String!
  mediadescription: String!
  contenttype: String!
}

type AddChatResponse {
  status: String!
  ResponseCode: String
  affectedRows: Chatinfo
}

type Chatinfo {
  chatid: ID
}

type AddChatmessageResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [ChatMessageInfo]
}

type ChatMessageInfo {
  messid: ID
  chatid: ID
  userid: ID
  content: String
  createdat: Date
}

type Userinforesponse {
  status: String!
  ResponseCode: String
  affectedRows: Userinfo
}

type Userinfo {
  userid: ID
  img: String
  username: String
  slug: Int
  biography: String
  updatedat: Date!
}

type UserFriendsResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Userinfo]
}

type User {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  createdat: Date
  updatedat: Date
}

type Profile {
  id: ID
  username: String
  status: Int
  slug: Int
  img: String
  biography: String
  isfollowed: Boolean
  isfollowing: Boolean
  amountposts: Int
  amounttrending: Int
  amountfollowed: Int
  amountfollower: Int
  amountfriends: Int
  amountblocked: Int
  imageposts: [ProfilePostMedia!]
  textposts: [ProfilePostMedia!]
  videoposts: [ProfilePostMedia!]
  audioposts: [ProfilePostMedia!]
}

type ProfileInfo {
  status: String
  ResponseCode: String
  affectedRows: Profile
}

type ProfileUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
}

type FollowRelations {
  followers: [ProfileUser!]
  following: [ProfileUser!]
}

type FollowRelationsResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: FollowRelations
}

type BlockedUser {
  userid: String
  img: String
  username: String
  slug: Int
}

type BlockedUsers {
  iBlocked: [BlockedUser!]
  blockedBy: [BlockedUser!]
}

type BlockedUsersResponse {
  status: String
  counter: Int!
  ResponseCode: String
  affectedRows: BlockedUsers
}

type UserListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [User]
}

type Tag {
  name: String!
}

type TagSearchResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Tag]
}

type PostResponse {
  status: String!
  ResponseCode: String
  affectedRows: Post
}

type PostListResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Post!]
}

type Post {
  id: ID!
  contenttype: String!
  title: String!
  media: String!
  cover: String!
  mediadescription: String!
 createdat: Date!
  amountlikes: Int!
  amountviews: Int!
  amountcomments: Int!
  amountdislikes: Int!
  amounttrending: Int!
  isliked: Boolean!
  isviewed: Boolean!
  isreported: Boolean!
  isdisliked: Boolean!
  issaved: Boolean!
  tags: TagList!
  user: ProfileUser!
  comments: [Comment!]!
}

type Comment {
  commentid: ID!
  userid: ID!
  postid: ID!
  parentid: ID
  content: String!
  createdat: Date!
  amountlikes: Int!
  amountreplies: Int!
  isliked: Boolean!
  user: ProfileUser!
}

type CommentResponse {
  status: String!
  counter: Int!
  ResponseCode: String
  affectedRows: [Comment]
}

input RegistrationInput {
  email: String!
  password: String!
  username: String!
}

input PostInput {
  title: String!
  mediadescription: String
  contenttype: ContentType!
  media: [String!]
  cover: [String!]
  tags: [String!]
}

input ChatInput {
  name: String!
  image: String
  recipients: [String!]!
}

input UpdateChatInput {
  chatid: ID!
  name: String
  image: String
}

input ChatParticipantsInput {
  chatid: ID!
  recipients: [String!]!
}

input FeedInput {
  feedid: ID!
  title: String!
  media: String!
  mediadescription: String
  contenttype: String!
}
input SearchUserInput {
  "User ID (UUID)"
  userid: ID
  "Username (3–23 chars, must include letters)"
  username: String
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}

input PaginationInput {
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}

input GetProfileInput {
  "User ID (UUID)"
  userid: ID
  "Number of posts to fetch (1–20)"
  postLimit: Int
}

input ListFollowRelationsInput {
  "User ID (UUID)"
  userid: ID
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}

input ListPostsInput {
  "Post filter criteria (IMAGE, AUDIO, TEXT, VIDEO, FOLLOWED, FOLLOWER)"
  filterBy: [PostFilterType!]
  "Apply ignore list (YES/NO)"
  IgnorList: IgnoreOption
  "Sorting (NEWEST, TRENDING, LIKES, etc.)"
  sortBy: PostSortType
  "User ID"
  userid: ID
  "Post ID"
  postid: ID
  "Title search (2–63 chars)"
  title: String
  "Tag to search (2–53 chars)"
  tag: String
  "From date (YYYY-MM-DD)"
  from: Date
  "To date (YYYY-MM-DD)"
  to: Date
  "Post offset (0–PHP_INT_MAX)"
  offset: Int
  "Post limit (1–20)"
  limit: Int
  "Comment offset (0–PHP_INT_MAX)"
  commentOffset: Int
  "Comment limit (1–20)"
  commentLimit: Int
}

input ListChildCommentsInput {
  "Parent comment ID (UUID)"
  parent: ID!
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}

input SearchTagsInput {
  "Tag to search (2–53 chars)"
  tagName: String!
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}

input GetChatInput {
  "Chat ID (UUID)"
  chatid: ID!
  "Chat message offset (0–PHP_INT_MAX)"
  messageOffset: Int
  "Chat message limit (1–20)"
  messageLimit: Int
}

input ListChatsInput {
  "Sort by parameter (current options: newest)"
  sortBy: String
  "From date (YYYY-MM-DD)"
  from: Date
  "To date (YYYY-MM-DD)"
  to: Date
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
  "Message offset (0–PHP_INT_MAX)"
  messageOffset: Int
  "Message limit (1–20)"
  messageLimit: Int
}

input ListChatMessagesInput {
  "Chat ID (UUID)"
  chatid: ID!
  "Message offset (0–PHP_INT_MAX)"
  offset: Int
  "Message limit (1–20)"
  limit: Int
}

input DayPaginatedInput {
  "Day filter (D0–D5, W0, M0, Y0)"
  day: DayFilterType!
  "Pagination offset (0–PHP_INT_MAX)"
  offset: Int
  "Pagination limit (1–20)"
  limit: Int
}