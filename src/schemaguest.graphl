schema {
  query: Query
  mutation: Mutation
}

type Query {
  hello: HelloResponse
}

scalar Decimal

type Mutation {
  register(input: RegistrationInput!): RegisterResponse!
  verifyAccount(userid: ID!): DefaultResponse!
  login(email: String!, password: String!): AuthPayload!
  requestPasswordReset(email: String!): ResetPasswordRequestResponse!
  resetPassword(token: String!, password: String!): DefaultResponse
  refreshToken(refreshToken: String!): AuthPayload!
  verifyAccessToken(token: ID!): HelloResponse!
  verifyReferralString(referralString: String!): ReferralResponse!
  contactus(name: String!, email: String!, message: String!): ContactusResponse!
}


type ReferralResponse {
  status: String!
  ResponseCode: String
  affectedRows: ReferralInfo
}

type ReferralInfo {
  uid: String
  username: String
  slug: String
  img: String
}

type ContactusResponsePayload {
  msgid: Decimal,
  email: String,
  name: String,
  message: String,
  ip: String,
  createdat: String
}

type ContactusResponse {
  status: String!
  ResponseCode: String
  affectedRows: ContactusResponsePayload
}

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
  lastMergedPullRequestNumber: String
  companyAccountId: ID
}

type RegisterResponse {
  status: String
  ResponseCode: String
  userid: ID
}

type DefaultResponse {
  status: String!
  ResponseCode: String
}

type ResetPasswordRequestResponse {
  status: String!
  ResponseCode: String
  nextAttemptAt: String
}

type AuthPayload {
  status: String!
  ResponseCode: String
  accessToken: String
  refreshToken: String
}

input RegistrationInput {
  email: String!
  password: String!
  username: String!
  pkey: String
  referralUuid: ID!
}

