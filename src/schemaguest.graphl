schema {
  query: Query
  mutation: Mutation
}

type Query {
  hello: HelloResponse
  referralList(offset: Int, limit: Int): ReferralListResponse!
}

type Mutation {
  register(input: RegisterInput!): RegisterResponse!
  verifiedAccount(userid: ID!): verifiedAccount!
  login(email: String!, password: String!): AuthPayload!
  refreshToken(refreshToken: String!): AuthPayload!
  contactus(name: String!, email: String!, message: String!): StandardResponse!
}

type StandardResponse {
  status: String!
  ResponseCode: String
  affectedRows: JSON
}

scalar JSON

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
}

type RegisterResponse {
  status: String
  ResponseCode: String
  userid: ID
}

type verifiedAccount {
  status: String!
  ResponseCode: String
}

type AuthPayload {
  status: String!
  ResponseCode: String
  accessToken: String
  refreshToken: String
}
type ReferralListResponse {
  status: String!
  counter: Int!
  ResponseCode: String!
  affectedRows: ReferralUsers!
}

type ReferralUsers {
  invitedBy: ProfilUser
  iInvited: [ProfilUser!]!
}

type ProfilUser {
  id: ID!
  username: String
  slug: Int
  img: String
  isfollowed: Boolean
  isfollowing: Boolean
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
  pkey: String
  referralUuid: ID
}
