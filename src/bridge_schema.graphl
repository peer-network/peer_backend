schema {
  query: Query
}

type Query {
  hello: HelloResponse!
  dailygemstatus: DailyGemStatusResponse!
  dailygemsresults(day: DayFilterType!): DailyGemsResultsResponse!
}

scalar Decimal
scalar Date

enum DayFilterType {
  D0
  D1
  D2
  D3
  D4
  D5
  W0
  M0
  Y0
}

type HelloResponse {
  currentuserid: ID
  currentVersion: String
  wikiLink: String
  lastMergedPullRequestNumber: String
  companyAccountId: ID
}

type DailyGemStatusResponse {
  status: String!
  ResponseCode: Int
  affectedRows: DailyGemStatusData
}

type DailyGemStatusData {
  d0: Decimal
  d1: Decimal
  d2: Decimal
  d3: Decimal
  d4: Decimal
  d5: Decimal
  w0: Decimal
  m0: Decimal
  y0: Decimal
}

type DailyGemsResultsResponse {
  status: String!
  ResponseCode: Int
  affectedRows: DailyGemsResultsData
}

type DailyGemsResultsData {
  data: [DailyGemsResultsUserData],
  totalGems: Decimal
}

type DailyGemsResultsUserData {
  userid: ID
  pkey: ID
  gems: Decimal
}