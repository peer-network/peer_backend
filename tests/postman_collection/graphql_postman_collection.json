{
	"info": {
		"_postman_id": "3fbc734e-cd22-4f47-8dce-4fde2e0941d3",
		"name": "Limitless Graphql Automation Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43606001",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/43606001-3fbc734e-cd22-4f47-8dce-4fde2e0941d3?action=share&source=collection_link&creator=43606001"
	},
	"item": [
		{
			"name": "Hello",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Null is in there\", function () {",
							"    let responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
							"});",
							"",
							"",
							"//and even more cunting of the cunt",
							"",
							"// Function to resolve nested variables in a string",
							"function resolveNestedVariables(value) {",
							"    if (typeof value === \"string\" && value.includes(\"{{\")) {",
							"        return value.replace(/{{(.*?)}}/g, (match, variableName) => {",
							"            return pm.environment.get(variableName) || match; // Replace with the value if found",
							"        });",
							"    }",
							"    return value; // Return non-string or non-nested values as they are",
							"}",
							"",
							"// Loop through all environment variables and resolve nested variables, excluding `initial_` prefixed vars",
							"pm.environment.values.each((envVar) => {",
							"    // Skip variables prefixed with `initial_`",
							"    if (!envVar.key.startsWith(\"initial_\")) {",
							"        let currentValue = pm.environment.get(envVar.key);",
							"",
							"        // Resolve only if the current value contains `{{}}`",
							"        if (typeof currentValue === \"string\" && currentValue.includes(\"{{\")) {",
							"            let resolvedValue = resolveNestedVariables(currentValue);",
							"            pm.environment.set(envVar.key, resolvedValue); // Update the current value with resolved content",
							"        }",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//do some environment nesting because postman can't... cunt!",
							"",
							"// Loop through environment variables with initial values prefixed by \"initial_\"",
							"pm.environment.values.each((envVar) => {",
							"    // Check if this is an \"initial_\" variable",
							"    if (envVar.key.startsWith(\"initial_\")) {",
							"        let originalKey = envVar.key.replace(\"initial_\", \"\"); // Get the original variable name",
							"        let initialValue = pm.environment.get(envVar.key); // Get the initial value",
							"",
							"        console.log(`Resetting variable \"${originalKey}\" to its initial value: ${initialValue}`);",
							"        ",
							"        // Set the main variable to its initial value",
							"        pm.environment.set(originalKey, initialValue);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Hello {\n    hello {\n        currentuserid\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Contact us",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10401\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Contactus {\n    contactus(name: \"{{username}}\", email: \"{{random_email}}\", message: \"Bullshit!\") {\n        status\n        ResponseCode\n        affectedRows {\n            msgid\n            email\n            name\n            message\n            ip\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get profile type injection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(postLimit: 20, userid: \"{{uuid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n            imageposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            textposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            videoposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            audioposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}