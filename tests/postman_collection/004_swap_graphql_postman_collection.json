{
	"info": {
		"_postman_id": "3d98b972-e0e3-4cb8-89b8-2a5215903741",
		"name": "004_swap_graphql",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43606001",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/43606001-3d98b972-e0e3-4cb8-89b8-2a5215903741?action=share&source=collection_link&creator=43606001"
	},
	"item": [
		{
			"name": "Hello",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Null is in there\", function () {",
							"    let responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
							"});",
							"",
							"pm.test(\"Save companyAccountId as referralUuid\", function () {",
							"    const response = pm.response.json();",
							"    const id = response.data?.hello?.companyAccountId;",
							"",
							"    pm.expect(id, \"companyAccountId should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    pm.environment.set(\"referralUuid\", id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Hello {\n    hello {\n        currentuserid\n        currentVersion\n        wikiLink\n        lastMergedPullRequestNumber\n        companyAccountId\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid\", response.data.register.userid);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{w_userid_t2}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transfer token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11211\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveTransfer {\n    resolveTransferV2(recipient: \"{{userid}}\", numberoftokens: 160, message: \"hi\") {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            createdat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let liquidity = response.data.balance.currentliquidity;",
							"pm.environment.set(\"liquidity\", liquidity);",
							"console.log(\"Saved liquidity:\", liquidity);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login referred tester",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n\n\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let liquidity = response.data.balance.currentliquidity;",
							"pm.environment.set(\"liquidity2\", liquidity);",
							"console.log(\"Saved liquidity:\", liquidity);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11217\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"150\"\n        password: \"{{password}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity2\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 157.5;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 157.5\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity2\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11215\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let transactions = response?.data?.getTransactionHistory?.affectedRows || [];",
							"",
							"let inviter = transactions.find(tx => tx.transferaction === \"INVITER_FEE\");",
							"let credit = transactions.find(tx => tx.transferaction === \"CREDIT\");",
							"",
							"pm.test(\"INVITER_FEE transaction has correct amount\", function () {",
							"    pm.expect(inviter).to.not.be.undefined;",
							"    pm.expect(inviter.tokenamount).to.eql(1.5);",
							"});",
							"",
							"pm.test(\"CREDIT transaction has correct amount\", function () {",
							"    pm.expect(credit).to.not.be.undefined;",
							"    pm.expect(credit.tokenamount).to.eql(150);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTransactionHistory {\n    getTransactionHistory(limit: 5) {\n        status\n        ResponseCode\n        affectedRows {\n            transactionid\n            operationid\n            transactiontype\n            senderid\n            recipientid\n            tokenamount\n            transferaction\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get LP history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11213\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"Failed to parse response JSON\", e);",
							"}",
							"",
							"let swap = response?.data?.getLiquidityPoolHistory?.affectedRows?.[0];",
							"",
							"pm.test(\"SwapID is present\", function () {",
							"    pm.expect(swap?.swapid).to.not.be.undefined;",
							"    pm.expect(swap?.swapid).to.be.a(\"string\");",
							"});",
							"",
							"pm.environment.set(\"swapid\", swap.swapid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetLiquidityPoolHistory {\n    getLiquidityPoolHistory(offset: null, limit: null) {\n        status\n        ResponseCode\n        affectedRows {\n            swapid\n            transactionid\n            transactiontype\n            senderid\n            tokenamount\n            btcamount\n            status\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update trans status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11214\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateSwapTranStatus {\n    updateSwapTranStatus(transactionId: \"{{swapid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if status is updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11213\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let history = response?.data?.getLiquidityPoolHistory?.affectedRows;",
							"",
							"pm.test(\"Liquidity pool history exists\", function () {",
							"    pm.expect(history).to.be.an(\"array\").that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Liquidity pool transaction status is PAID\", function () {",
							"    let status = history[0]?.status;",
							"    pm.expect(status).to.eql(\"PAID\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetLiquidityPoolHistory {\n    getLiquidityPoolHistory(limit: 1) {\n        status\n        ResponseCode\n        affectedRows {\n            swapid\n            transactionid\n            transactiontype\n            senderid\n            tokenamount\n            btcamount\n            status\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity (ref%)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = parseFloat(pm.environment.get(\"liquidity\"));",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"let expectedDecrease = 1.5;",
							"let actualDecrease = newLiquidity - oldLiquidity;",
							"let tolerance = 0.1;",
							"pm.test(`Liquidity should increase by approximately ${expectedDecrease} ±${tolerance}`, function () {",
							"    pm.expect(actualDecrease).to.be.within(expectedDecrease - tolerance, expectedDecrease + tolerance);",
							"});",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Decreased by: ${actualDecrease}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11215\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"Failed to parse response JSON:\", e);",
							"}",
							"",
							"let transactions = response?.data?.getTransactionHistory?.affectedRows || [];",
							"",
							"let inviterFeeTx = transactions.find(tx =>",
							"    tx.transferaction === \"INVITER_FEE\" &&",
							"    tx.tokenamount === 1.5",
							");",
							"",
							"pm.test(\"Inviter fee transaction of 1.5 token exists\", function () {",
							"    pm.expect(inviterFeeTx).to.not.be.undefined;",
							"    pm.expect(inviterFeeTx.tokenamount).to.eql(1.5);",
							"    pm.expect(inviterFeeTx.transferaction).to.eql(\"INVITER_FEE\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTransactionHistory {\n    getTransactionHistory(limit: 1) {\n        status\n        ResponseCode\n        affectedRows {\n            transactionid\n            operationid\n            transactiontype\n            senderid\n            recipientid\n            tokenamount\n            transferaction\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap 0 Tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30271\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"0\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap token less than allowed (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30271\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"0.00000000000000000001\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap negative amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30271\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"-100\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap too big amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"51301\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"11111111111111111111111111111111111111111111\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap to invalid format of address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"we must have some validation here :(\"\n        numberoftokens: \"10\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"10\"\n        password: \"{{password}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let currentLiquidity = response.data.balance.currentliquidity;",
							"let previousLiquidity = pm.environment.get(\"liquidity\");",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(previousLiquidity).to.be.a(\"number\");",
							"});",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(currentLiquidity).to.eql(previousLiquidity);",
							"});",
							"console.log(`Previous Liquidity: ${previousLiquidity}, Current Liquidity: ${currentLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11215\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"Failed to parse response JSON:\", e);",
							"}",
							"",
							"let transactions = response?.data?.getTransactionHistory?.affectedRows || [];",
							"",
							"let inviterFeeTx = transactions.find(tx =>",
							"    tx.transferaction === \"INVITER_FEE\" &&",
							"    tx.tokenamount === 1.5",
							");",
							"",
							"pm.test(\"Inviter fee transaction of 1.5 token exists\", function () {",
							"    pm.expect(inviterFeeTx).to.not.be.undefined;",
							"    pm.expect(inviterFeeTx.tokenamount).to.eql(1.5);",
							"    pm.expect(inviterFeeTx.transferaction).to.eql(\"INVITER_FEE\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTransactionHistory {\n    getTransactionHistory(limit: 1) {\n        status\n        ResponseCode\n        affectedRows {\n            transactionid\n            operationid\n            transactiontype\n            senderid\n            recipientid\n            tokenamount\n            transferaction\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11217\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"150\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 156;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 156\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11215\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"const transactions = response?.data?.getTransactionHistory?.affectedRows || [];",
							"",
							"const expectedAmounts = {",
							"    \"POOL_FEE\": 1.5,",
							"    \"CREDIT\": 150,",
							"    \"PEER_FEE\": 3,",
							"    \"BURN_FEE\": 1.5",
							"};",
							"",
							"pm.test(\"All transferactions have correct tokenamounts\", function () {",
							"    Object.entries(expectedAmounts).forEach(([action, expectedAmount]) => {",
							"        const tx = transactions.find(t => t.transferaction === action);",
							"        pm.expect(tx, `Missing transaction for ${action}`).to.not.be.undefined;",
							"        pm.expect(tx.tokenamount, `${action} tokenamount mismatch`).to.eql(expectedAmount);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTransactionHistory {\n    getTransactionHistory(limit: 4) {\n        status\n        ResponseCode\n        affectedRows {\n            transactionid\n            operationid\n            transactiontype\n            senderid\n            recipientid\n            tokenamount\n            transferaction\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swap decimal amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11217\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SwapTokens {\n    swapTokens(\n        btcAddress: \"1tiDfTTgr7Vx5Y6PV4sCC5sJqiekLsiSN\"\n        numberoftokens: \"150.5\"\n        password: \"{{w_password_t2}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            tokenSend\n            tokensSubstractedFromWallet\n            expectedBtcReturn\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 156.52;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"let tolerance = 0.001; ",
							"",
							"pm.test(\"Liquidity should decrease by ~156.52 (with small tolerance)\", function () {",
							"    pm.expect(Math.abs(actualDifference - expectedDifference)).to.be.below(tolerance);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11215\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"const transactions = response?.data?.getTransactionHistory?.affectedRows || [];",
							"",
							"const expectedAmounts = {",
							"    \"POOL_FEE\": 1.505,",
							"    \"CREDIT\": 150.5,",
							"    \"PEER_FEE\": 3.01,",
							"    \"BURN_FEE\": 1.505",
							"};",
							"",
							"pm.test(\"All transactions of each transferaction have correct tokenamount\", function () {",
							"    Object.entries(expectedAmounts).forEach(([action, expectedAmount]) => {",
							"        const matchingTxs = transactions.filter(t => t.transferaction === action);",
							"        pm.expect(matchingTxs.length, `No transactions found for ${action}`).to.be.above(0);",
							"        matchingTxs.forEach((tx, index) => {",
							"            pm.expect(tx.tokenamount, `${action} tokenamount mismatch at index ${index}`).to.eql(expectedAmount);",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTransactionHistory {\n    getTransactionHistory(limit: 4) {\n        status\n        ResponseCode\n        affectedRows {\n            transactionid\n            operationid\n            transactiontype\n            senderid\n            recipientid\n            tokenamount\n            transferaction\n            message\n            createdat\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11202\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let tokenPrice = response?.data?.getTokenPrice?.affectedRows?.currentTokenPrice;",
							"",
							"if (tokenPrice !== undefined) {",
							"    pm.environment.set(\"currentTokenPrice\", tokenPrice);",
							"    console.log(\"Saved currentTokenPrice:\", tokenPrice);",
							"} else {",
							"    console.log(\"currentTokenPrice not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTokenPrice {\n    getTokenPrice {\n        status\n        ResponseCode\n        affectedRows {\n            currentTokenPrice\n            updatedAt\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add liquidity (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11218\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddLiquidity {\n    addLiquidity(amountToken: \"1\", amountBtc: \"0.00001\") {\n        status\n        ResponseCode\n        affectedRows {\n            newTokenAmount\n            newBtcAmount\n            newTokenPrice\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11202\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let newPrice = parseFloat(response?.data?.getTokenPrice?.affectedRows?.currentTokenPrice);",
							"let oldPrice = parseFloat(pm.environment.get(\"currentTokenPrice\"));",
							"",
							"pm.test(\"Previous token price exists\", function () {",
							"    pm.expect(oldPrice).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Token price has changed\", function () {",
							"    pm.expect(newPrice).to.not.equal(oldPrice);",
							"});",
							"",
							"if (!isNaN(newPrice)) {",
							"    pm.environment.set(\"currentTokenPrice\", newPrice);",
							"    console.log(\"Updated token price:\", newPrice);",
							"} else {",
							"    console.log(\"New token price is invalid.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTokenPrice {\n    getTokenPrice {\n        status\n        ResponseCode\n        affectedRows {\n            currentTokenPrice\n            updatedAt\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add negative token amount (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30241\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddLiquidity {\n    addLiquidity(amountToken: \"-1\", amountBtc: \"0.0001\") {\n        status\n        ResponseCode\n        affectedRows {\n            newTokenAmount\n            newBtcAmount\n            newTokenPrice\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add negative btc amount (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30270\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddLiquidity {\n    addLiquidity(amountToken: \"2\", amountBtc: \"-0.00001\") {\n        status\n        ResponseCode\n        affectedRows {\n            newTokenAmount\n            newBtcAmount\n            newTokenPrice\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add zero (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30241\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddLiquidity {\n    addLiquidity(amountToken: \"0\", amountBtc: \"0\") {\n        status\n        ResponseCode\n        affectedRows {\n            newTokenAmount\n            newBtcAmount\n            newTokenPrice\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get token price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11202\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let newPrice = parseFloat(response?.data?.getTokenPrice?.affectedRows?.currentTokenPrice);",
							"let oldPrice = parseFloat(pm.environment.get(\"currentTokenPrice\"));",
							"",
							"pm.test(\"Previous token price exists\", function () {",
							"    pm.expect(oldPrice).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Token price has not changed\", function () {",
							"    pm.expect(newPrice).to.equal(oldPrice);",
							"});",
							"",
							"if (!isNaN(newPrice)) {",
							"    pm.environment.set(\"currentTokenPrice\", newPrice);",
							"    console.log(\"Updated token price:\", newPrice);",
							"} else {",
							"    console.log(\"New token price is invalid.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTokenPrice {\n    getTokenPrice {\n        status\n        ResponseCode\n        affectedRows {\n            currentTokenPrice\n            updatedAt\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}