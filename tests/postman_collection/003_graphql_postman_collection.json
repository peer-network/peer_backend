{
	"info": {
		"_postman_id": "abc90a79-88d8-4e41-a297-b37c5bce1a6d",
		"name": "AHMED 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32542010",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/32542010-abc90a79-88d8-4e41-a297-b37c5bce1a6d?action=share&source=collection_link&creator=32542010"
	},
	"item": [
		{
			"name": "Hello",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Null is in there\", function () {",
							"    let responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
							"});",
							"",
							"pm.test(\"Save companyAccountId as referralUuid\", function () {",
							"    const response = pm.response.json();",
							"    const id = response.data?.hello?.companyAccountId;",
							"",
							"    pm.expect(id, \"companyAccountId should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    pm.environment.set(\"referralUuid\", id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Hello {\n    hello {\n        currentuserid\n        currentVersion\n        wikiLink\n        lastMergedPullRequestNumber\n        companyAccountId\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{email_t3}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10901\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Flooding Server 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11515\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"if (response.uploadedFiles) {",
							"    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
							"    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
							"} else {",
							"    pm.test(\"uploadedFiles field is missing\", function () {",
							"        pm.expect(false).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "eligibilityToken",
							"value": "{{eligibilityToken}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/etc/newman/media_files/sample_image.jpg"
						}
					]
				},
				"url": {
					"raw": "https://peer-network.eu/upload-post",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"upload-post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10901\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Flooding Server 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11515\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"if (response.uploadedFiles) {",
							"    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
							"    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
							"} else {",
							"    pm.test(\"uploadedFiles field is missing\", function () {",
							"        pm.expect(false).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "eligibilityToken",
							"value": "{{eligibilityToken}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/etc/newman/media_files/sample_image.jpg"
						}
					]
				},
				"url": {
					"raw": "https://peer-network.eu/upload-post",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"upload-post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10901\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Flooding Server 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11515\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"if (response.uploadedFiles) {",
							"    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
							"    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
							"} else {",
							"    pm.test(\"uploadedFiles field is missing\", function () {",
							"        pm.expect(false).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "eligibilityToken",
							"value": "{{eligibilityToken}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/etc/newman/media_files/sample_image.jpg"
						}
					]
				},
				"url": {
					"raw": "https://peer-network.eu/upload-post",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"upload-post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10901\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Flooding Server 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11515\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"if (response.uploadedFiles) {",
							"    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
							"    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
							"} else {",
							"    pm.test(\"uploadedFiles field is missing\", function () {",
							"        pm.expect(false).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "eligibilityToken",
							"value": "{{eligibilityToken}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/etc/newman/media_files/sample_image.jpg"
						}
					]
				},
				"url": {
					"raw": "https://peer-network.eu/upload-post",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"upload-post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10901\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Flooding Server 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11515\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"if (response.uploadedFiles) {",
							"    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
							"    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
							"} else {",
							"    pm.test(\"uploadedFiles field is missing\", function () {",
							"        pm.expect(false).to.be.true;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "eligibilityToken",
							"value": "{{eligibilityToken}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/etc/newman/media_files/sample_image.jpg"
						}
					]
				},
				"url": {
					"raw": "https://peer-network.eu/upload-post",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"upload-post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get eligibility token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"40301\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let token = response?.data?.postEligibility?.eligibilityToken;",
							"",
							"if (token) {",
							"    pm.environment.set(\"eligibilityToken\", token);",
							"    console.log(\"Eligibility token saved to environment.\");",
							"} else {",
							"    console.warn(\"Eligibility token not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follows 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30203\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(offset: -10, limit: -100) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follows 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(offset: 0.3, limit: 1.5) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follows 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(offset: vvv, limit: zzz) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follows 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(offset: *@!, limit: *@!) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follows 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(offset: 999999, limit: 9999999999) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Friends 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30203\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(offset: -10, limit: -100) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Friends 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(offset: 999999, limit: 999999) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Friends 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(offset: vvv, limit: zzz) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Friends 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(offset: *@!, limit: *@!) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Friends 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(offset: 0.3, limit: 0.5) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chats 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30219\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Searchchat {\n    getChat(chatid: \"{{uuid}}\", messageOffset: -1000, messageLimit: -1000) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            image\n            name\n            createdat\n            updatedat\n            chatmessages {\n                id\n                content\n                senderid\n                chatid\n                createdat\n            }\n            chatparticipants {\n                userid\n                img\n                username\n                hasaccess\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chats 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Searchchat {\n    getChat(chatid: \"{{uuid}}\", messageOffset: 0.3, messageLimit: 1.3) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            image\n            name\n            createdat\n            updatedat\n            chatmessages {\n                id\n                content\n                senderid\n                chatid\n                createdat\n            }\n            chatparticipants {\n                userid\n                img\n                username\n                hasaccess\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chats 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Searchchat {\n    getChat(chatid: \"{{uuid}}\", messageOffset: vvv, messageLimit: zzz) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            image\n            name\n            createdat\n            updatedat\n            chatmessages {\n                id\n                content\n                senderid\n                chatid\n                createdat\n            }\n            chatparticipants {\n                userid\n                img\n                username\n                hasaccess\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chats 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Searchchat {\n    getChat(chatid: \"{{uuid}}\", messageOffset: *@!, messageLimit: *@!) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            image\n            name\n            createdat\n            updatedat\n            chatmessages {\n                id\n                content\n                senderid\n                chatid\n                createdat\n            }\n            chatparticipants {\n                userid\n                img\n                username\n                hasaccess\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Chats 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31815\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListChatMessages {\n    listChatMessages(chatid: \"{{uuid}}\", offset: null, limit: null) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            messid\n            chatid\n            userid\n            content\n            createdat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\"]\n            contenttype: image\n        }\n        action: Zhopa  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\"]\n            contenttype: kwjhwkjekj\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{uuid}}\" , action: Zhopa) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: FOLLOWED\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: \"1111-11-11\"\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: \"2070-10-22\"\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: \"{{uuid}}\"\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: \"shegeci trakshi\"\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"21501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: \"shegecitrakshi\"\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30203\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        offset: -10\n        limit: -100\n        commentOffset: -10\n        commentLimit: -100\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                amountlikes\n                isliked\n                createdat\n                user {\n                    id\n                    username\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        offset: 99999999\n        limit: 999999999\n        commentOffset: 999999\n        commentLimit: 99999999\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                amountlikes\n                isliked\n                createdat\n                user {\n                    id\n                    username\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 12",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30212\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: Zhopa\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 13",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30213\");",
							"});",
							"pm.test(\"Status is success\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: Zhopa\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        offset: *@!\n        limit: *@!\n        commentOffset: *@!\n        commentLimit: *@!\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                amountlikes\n                isliked\n                createdat\n                user {\n                    id\n                    username\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 15",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        offset: 1.5\n        limit: 3.5\n        commentOffset: 1.5\n        commentLimit: 3.5\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                amountlikes\n                isliked\n                createdat\n                user {\n                    id\n                    username\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 16",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        offset: zzz\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                amountlikes\n                isliked\n                createdat\n                user {\n                    id\n                    username\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: Zhopa\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 18",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: Zhopa\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 19",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: Zhopa\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 20",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: Zhopa\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 21",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: Zhopa\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 22",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: Zhopa\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 23",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: Zhopa\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 24",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: Zhopa\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts 25",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: Zhopa\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30203\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallusers {\n  listUsers (offset:-100, limit:-120) {\n    status\n    counter\n    ResponseCode\n    affectedRows {\n      id\n      username\n      status\n      slug\n      img\n      biography\n      createdat\n      updatedat\n    }\n  }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallusers {\n  listUsers (offset:9999999, limit:99999999) {\n    status\n    counter\n    ResponseCode\n    affectedRows {\n      id\n      username\n      status\n      slug\n      img\n      biography\n      createdat\n      updatedat\n    }\n  }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallusers {\n  listUsers (offset:*@!, limit:$%^) {\n    status\n    counter\n    ResponseCode\n    affectedRows {\n      id\n      username\n      status\n      slug\n      img\n      biography\n      createdat\n      updatedat\n    }\n  }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallusers {\n  listUsers (offset:1.5, limit:9.2) {\n    status\n    counter\n    ResponseCode\n    affectedRows {\n      id\n      username\n      status\n      slug\n      img\n      biography\n      createdat\n      updatedat\n    }\n  }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Getallusers {\n  listUsers (offset:abc, limit:xyz) {\n    status\n    counter\n    ResponseCode\n    affectedRows {\n      id\n      username\n      status\n      slug\n      img\n      biography\n      createdat\n      updatedat\n    }\n  }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31007\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(userid: \"{{uuid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(limit: 2000) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(username: 123) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31007\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(postLimit: 20, userid: \"{{uuid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n            imageposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            textposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            videoposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            audioposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"'1'='1'\",\n    password: \"'1'='1'\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"1=1--\",\n    password: \"1=1--\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"test@example.com' OR SLEEP(5)--\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"' OR 1=1 UNION SELECT null,@@version--\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"'; EXEC xp_cmdshell('ping attacker.com')--\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30202\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);",
							"",
							"",
							"let username = pm.environment.get(\"username\");",
							"",
							"if (!username) {",
							"    username = \"testUser\"; ",
							"    pm.environment.set(\"username\", username);",
							"}",
							"",
							"function addRandomEmoji(name) {",
							"    const emojis = [\"🔥\", \"🚀\", \"💎\", \"🎉\", \"💡\", \"🐱\", \"⚡\", \"🦄\"]; // Emoji list",
							"    let randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];",
							"    return `${name} ${randomEmoji}`;",
							"}",
							"",
							"let invalidUsername = addRandomEmoji(username);",
							"pm.environment.set(\"invalid_username\", invalidUsername);",
							"console.log(\"Invalid Username:\", invalidUsername);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"{{invalid_username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30202\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"! @ # $ © ® ™ ±\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30202\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"validuservaliduservaliduser\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30202\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"va\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30224\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let invalidEmail = `user_${Math.floor(Math.random() * 1000000)}`;",
							"",
							"pm.environment.set(\"invalid_email\", invalidEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{invalid_email}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{w_email_t3}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 12",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30226\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{invalid_username}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 13",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31007\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{invalid_username}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{uuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration 14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30301\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{invalid_username}}\",\n    username: \"{{username}}\",\n    referralUuid: \"\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30203\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: -10\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: 100\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30212\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: \"pdldpw\"\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30213\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: \"oksqo\"\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31510\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: \"{{uuid}}\"\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31007\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: \"{{uuid}}\"\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32019\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: \"{{uuid}}\"\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}