{
	"info": {
		"_postman_id": "3b526bad-6527-4492-b229-fa0abbc599f3",
		"name": "003_advertisements_graphql",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43606001",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/43606001-3b526bad-6527-4492-b229-fa0abbc599f3?action=share&source=collection_link&creator=43606001"
	},
	"item": [
		{
			"name": "Hello",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Null is in there\", function () {",
							"    let responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
							"});",
							"",
							"pm.test(\"Save companyAccountId as referralUuid\", function () {",
							"    const response = pm.response.json();",
							"    const id = response.data?.hello?.companyAccountId;",
							"",
							"    pm.expect(id, \"companyAccountId should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    pm.environment.set(\"referralUuid\", id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Hello {\n    hello {\n        currentuserid\n        currentVersion\n        wikiLink\n        lastMergedPullRequestNumber\n        companyAccountId\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(",
							"        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
							"    ).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postidadd1\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							"",
							"let postResponseCode = \"\";",
							"try {",
							"    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
							"} catch (err) {",
							"    console.log(\"Couldn't access ResponseCode:\", err);",
							"}",
							"",
							"if (postResponseCode === \"11513\") {",
							"    pm.environment.set(\"isDailyFreePost\", \"true\");",
							"    console.log(\"This was a Daily Free Post (code 11513).\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreePost\");",
							"    console.log(\"Not a Daily Free Post (code not 11513).\");",
							"}",
							"",
							"pm.test(\"All uploaded image resolutions are correct\", function () {",
							"    try {",
							"        const expectedResolutions = [\"200x300\", \"736x413\", \"225x225\"];",
							"        const mediaString = postResponse?.data?.createPost?.affectedRows?.media;",
							"        const mediaArray = JSON.parse(mediaString);",
							"",
							"        pm.expect(mediaArray.length, \"Expected 3 media items\").to.eql(3);",
							"",
							"        for (let i = 0; i < expectedResolutions.length; i++) {",
							"            const actual = mediaArray[i]?.options?.resolution;",
							"            const expected = expectedResolutions[i];",
							"",
							"            pm.expect(actual, `Media[${i}] resolution should be ${expected}`).to.eql(expected);",
							"        }",
							"    } catch (err) {",
							"        console.error(\"Error validating media resolutions:\", err);",
							"        throw new Error(\"Failed to validate media resolutions.\");",
							"    }",
							"});",
							"",
							"pm.test(\"Save (createdat + 1 day) as startday\", function () {",
							"    const createdAt = pm.response.json()?.data?.createPost?.affectedRows?.createdat;",
							"",
							"    pm.expect(createdAt, \"createdat should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    const date = new Date(createdAt);",
							"    date.setDate(date.getDate() + 1);",
							"",
							"    const yyyy = date.getFullYear();",
							"    const mm = String(date.getMonth() + 1).padStart(2, \"0\");",
							"    const dd = String(date.getDate()).padStart(2, \"0\");",
							"",
							"    const nextDay = `${yyyy}-${mm}-${dd}`;",
							"",
							"    pm.environment.set(\"startday\", nextDay);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\", \"{{base64_photo1}}\",\"{{base64_photo2}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid\", response.data.register.userid);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{w_userid_t2}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login referred tester",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n\n\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment post before ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let commentResponse = {};",
							"try {",
							"    commentResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let commentResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = commentResponse?.data?.createComment?.status || \"\";",
							"    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (commentResponseCode === \"11608\") {",
							"    pm.environment.set(\"isDailyFreeComment\", \"true\");",
							"    console.log(\"This was a Daily Free Comment.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeComment\");",
							"    console.log(\"Not a Daily Free Comment.\");",
							"}",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse JSON:\", err);",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
							"        if (commentId) {",
							"            pm.environment.set(\"commentid\", commentId);",
							"            console.log(\"commentid set to:\", commentId);",
							"        } else {",
							"            console.log(\"No commentid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Error extracting commentid:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping commentid set.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postidadd1}}\", content: \"{{comment_content}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like post before ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let likeResponse = {};",
							"try {",
							"    likeResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let likeResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = likeResponse?.data?.resolvePostAction?.status || \"\";",
							"    likeResponseCode = likeResponse?.data?.resolvePostAction?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11503\", \"11514\"]).to.include(likeResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (likeResponseCode === \"11514\") {",
							"    pm.environment.set(\"isDailyFreeLike\", \"true\");",
							"    console.log(\"This was a Daily Free Like.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeLike\");",
							"    console.log(\"Not a Daily Free Like.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postidadd1}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "View post before ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11506\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postidadd1}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create daily free post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11513\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postidadd\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							"",
							"let postResponseCode = \"\";",
							"try {",
							"    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
							"} catch (err) {",
							"    console.log(\"Couldn't access ResponseCode:\", err);",
							"}",
							"",
							"if (postResponseCode === \"11513\") {",
							"    pm.environment.set(\"isDailyFreePost\", \"true\");",
							"    console.log(\"This was a Daily Free Post (code 11513).\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreePost\");",
							"    console.log(\"Not a Daily Free Post (code not 11513).\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"text's\", mediadescription: \"text's\", contenttype: text, media: [\"{{new_bio}}\"], cover: \"{{base64_photo1}}\" }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise post 0 liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"51301\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd}}\"\n        startday: \"{{startday}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order and type\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(2);",
							"",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id, \"First postid should be existing_postid\")",
							"        .to.eql(existing_postid);",
							"    pm.expect(rows[0].advertisement.advertisementtype, \"First post type should be BASIC\")",
							"        .to.eql(\"BASIC\");",
							"",
							"    pm.expect(rows[1].post.id, \"Second postid should be existing_postid_2\")",
							"        .to.eql(existing_postid_2);",
							"    pm.expect(rows[1].advertisement.advertisementtype, \"Second post type should be BASIC\")",
							"        .to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let liquidity = response.data.balance.currentliquidity;",
							"pm.environment.set(\"liquidity\", liquidity);",
							"console.log(\"Saved liquidity:\", liquidity);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30209\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"hi\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31510\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{uuid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        startday: \"{{startday}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BSIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise previous date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32008\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        startday: \"2025-06-22\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32008\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        startday: \"2025-0622\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid duration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        startday: \"2030-07-23\"\n        durationInDays: DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30209\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"hi\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31510\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{uuid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postidadd1}}\"\n        advertisePlan: PINED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 500;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 500\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post diff time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_2\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 2);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 500;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 500\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post same time (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin other's post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_3\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postidadd}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 2000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 2000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(3);",
							"",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id, \"First postid should be postidadd\")",
							"        .to.eql(postidadd);",
							"    pm.expect(rows[0].advertisement.advertisementtype, \"First post type should be PINNED\")",
							"        .to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id, \"Second postid should be existing_postid\")",
							"        .to.eql(existing_postid);",
							"    pm.expect(rows[1].advertisement.advertisementtype, \"Second post type should be BASIC\")",
							"        .to.eql(\"BASIC\");",
							"",
							"    pm.expect(rows[2].post.id, \"Third postid should be existing_postid_2\")",
							"        .to.eql(existing_postid_2);",
							"    pm.expect(rows[2].advertisement.advertisementtype, \"Third post type should be BASIC\")",
							"        .to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin twice not forcing (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postidadd}}\"\n        advertisePlan: PINNED\n        forceUpdate: false\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin twice forcing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12005\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_4\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postidadd}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 2000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 2000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(3);",
							"",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id).to.eql(postidadd);",
							"    pm.expect(rows[0].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id).to.eql(existing_postid);",
							"    pm.expect(rows[1].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"",
							"    pm.expect(rows[2].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[2].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise own post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_5\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 500;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 500\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd1\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise own post diff time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_6\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 2);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        durationInDays: SEVEN_DAYS\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 3500;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 3500\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_6\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is still there",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd1\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise same time twice (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin own post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_7\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postidadd1}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 2000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 2000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_6\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_7\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"PINNED\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd1\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with two pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(4);",
							"",
							"    const postidadd1 = pm.environment.get(\"postidadd1\");",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id).to.eql(postidadd1);",
							"    pm.expect(rows[0].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id).to.eql(postidadd);",
							"    pm.expect(rows[1].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[2].post.id).to.eql(existing_postid);",
							"    pm.expect(rows[2].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"",
							"    pm.expect(rows[3].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[3].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise after pin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_8\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 9);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postidadd1}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 500;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 500\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_6\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_7\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_8\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"postidadd1\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with two pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(4);",
							"",
							"    const postidadd1 = pm.environment.get(\"postidadd1\");",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id).to.eql(postidadd1);",
							"    pm.expect(rows[0].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id).to.eql(postidadd);",
							"    pm.expect(rows[1].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[2].post.id).to.eql(existing_postid);",
							"    pm.expect(rows[2].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"",
							"    pm.expect(rows[3].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[3].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin advertised post not forcing (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{existing_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: false\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin advertised post forcing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_9\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{existing_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 1600;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 1600\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_6\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_7\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_8\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_9\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"PINNED\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"existing_postid\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with existing_postid pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(4);",
							"",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const postidadd1 = pm.environment.get(\"postidadd1\");",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"",
							"    pm.expect(rows[0].post.id).to.eql(existing_postid);",
							"    pm.expect(rows[0].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id).to.eql(postidadd1);",
							"    pm.expect(rows[1].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[2].post.id).to.eql(postidadd);",
							"    pm.expect(rows[2].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[3].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[3].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin others advertised post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId_10\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{existing_postid_2}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 2000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 2000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history 12",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const res = pm.response.json();",
							"    const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"    const amountAds = res?.data?.advertisementHistory?.affectedRows?.stats?.amountAds;",
							"",
							"    const expectedAds = [",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"existing_advertisementId_2\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_2\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_3\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_4\"),",
							"            postId: pm.environment.get(\"postidadd\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_5\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_6\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_7\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_8\"),",
							"            postId: pm.environment.get(\"postidadd1\"),",
							"            type: \"BASIC\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_9\"),",
							"            postId: pm.environment.get(\"existing_postid\"),",
							"            type: \"PINNED\"",
							"        },",
							"        {",
							"            adId: pm.environment.get(\"advertisementId_10\"),",
							"            postId: pm.environment.get(\"existing_postid_2\"),",
							"            type: \"PINNED\"",
							"        }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if post is boosted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"existing_postid_2\");",
							"",
							"pm.test(\"Created post does not exist in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List boosted posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check advertisement posts order with existing_postid_2 pinned first\", function () {",
							"    const rows = pm.response.json()?.data?.listAdvertisementPosts?.affectedRows || [];",
							"",
							"    pm.expect(rows.length).to.be.at.least(5);",
							"",
							"    const existing_postid = pm.environment.get(\"existing_postid\");",
							"    const existing_postid_2 = pm.environment.get(\"existing_postid_2\");",
							"    const postidadd1 = pm.environment.get(\"postidadd1\");",
							"    const postidadd = pm.environment.get(\"postidadd\");",
							"",
							"    pm.expect(rows[0].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[0].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[1].post.id).to.eql(existing_postid);",
							"    pm.expect(rows[1].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[2].post.id).to.eql(postidadd1);",
							"    pm.expect(rows[2].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[3].post.id).to.eql(postidadd);",
							"    pm.expect(rows[3].advertisement.advertisementtype).to.eql(\"PINNED\");",
							"",
							"    pm.expect(rows[4].post.id).to.eql(existing_postid_2);",
							"    pm.expect(rows[4].advertisement.advertisementtype).to.eql(\"BASIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListAdvertisementPosts {\n    listAdvertisementPosts {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            post {\n                id\n                contenttype\n                title\n                media\n                cover\n                mediadescription\n                createdat\n                amountlikes\n                amountviews\n                amountcomments\n                amountdislikes\n                amounttrending\n                isliked\n                isviewed\n                isreported\n                isdisliked\n                issaved\n                tags\n                url\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n            advertisement {\n                advertisementid\n                postid\n                advertisementtype\n                startdate\n                enddate\n                createdat\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const res = pm.response.json();",
							"const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"const stats = res?.data?.advertisementHistory?.affectedRows?.stats || {};",
							"const amountAds = stats.amountAds;",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const expectedAds = [",
							"        { adId: pm.environment.get(\"existing_advertisementId\"),   postId: pm.environment.get(\"existing_postid\"),   type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"existing_advertisementId_2\"), postId: pm.environment.get(\"existing_postid_2\"), type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId\"),            postId: pm.environment.get(\"postidadd\"),         type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_2\"),          postId: pm.environment.get(\"postidadd\"),         type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_3\"),          postId: pm.environment.get(\"postidadd\"),         type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_4\"),          postId: pm.environment.get(\"postidadd\"),         type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_5\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_6\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_7\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_8\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_9\"),          postId: pm.environment.get(\"existing_postid\"),   type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_10\"),         postId: pm.environment.get(\"existing_postid_2\"), type: \"PINNED\" }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});",
							"",
							"let postId = pm.environment.get(\"postidadd1\");",
							"let adId = pm.environment.get(\"advertisementId_7\");",
							"",
							"pm.test(\"Stats counters = 0\", function () {",
							"    pm.expect(stats.amountLikes).to.eql(0);",
							"    pm.expect(stats.amountViews).to.eql(0);",
							"    pm.expect(stats.amountComments).to.eql(0);",
							"    pm.expect(stats.amountDislikes).to.eql(0);",
							"});",
							"",
							"let advertisement = ads.find(ad => ad.id === adId && ad.type === \"PINNED\");",
							"",
							"pm.test(\"AdvertisementId_7 counters = 0\", function () {",
							"    pm.expect(advertisement, `Advertisement ${adId} not found`).to.not.be.undefined;",
							"    pm.expect(advertisement.amountLikes).to.eql(0);",
							"    pm.expect(advertisement.amountViews).to.eql(0);",
							"    pm.expect(advertisement.amountComments).to.eql(0);",
							"    pm.expect(advertisement.amountDislikes).to.eql(0);",
							"});",
							"",
							"pm.test(\"Post inside AdvertisementId_7 counters = 1\", function () {",
							"    pm.expect(advertisement.post.id).to.eql(postId);",
							"    pm.expect(advertisement.post.amountlikes).to.eql(1);",
							"    pm.expect(advertisement.post.amountviews).to.eql(1);",
							"    pm.expect(advertisement.post.amountcomments).to.eql(1);",
							"    pm.expect(advertisement.post.amountdislikes).to.eql(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment post after ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let commentResponse = {};",
							"try {",
							"    commentResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let commentResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = commentResponse?.data?.createComment?.status || \"\";",
							"    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (commentResponseCode === \"11608\") {",
							"    pm.environment.set(\"isDailyFreeComment\", \"true\");",
							"    console.log(\"This was a Daily Free Comment.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeComment\");",
							"    console.log(\"Not a Daily Free Comment.\");",
							"}",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse JSON:\", err);",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
							"        if (commentId) {",
							"            pm.environment.set(\"commentid\", commentId);",
							"            console.log(\"commentid set to:\", commentId);",
							"        } else {",
							"            console.log(\"No commentid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Error extracting commentid:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping commentid set.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postidadd1}}\", content: \"{{comment_content}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like post after ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let likeResponse = {};",
							"try {",
							"    likeResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let likeResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = likeResponse?.data?.resolvePostAction?.status || \"\";",
							"    likeResponseCode = likeResponse?.data?.resolvePostAction?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11503\", \"11514\"]).to.include(likeResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (likeResponseCode === \"11514\") {",
							"    pm.environment.set(\"isDailyFreeLike\", \"true\");",
							"    console.log(\"This was a Daily Free Like.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeLike\");",
							"    console.log(\"Not a Daily Free Like.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postidadd1}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dislike post after ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11504\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postidadd1}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "View post after ad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11506\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postidadd1}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertisement history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const res = pm.response.json();",
							"const ads = res?.data?.advertisementHistory?.affectedRows?.advertisements || [];",
							"const stats = res?.data?.advertisementHistory?.affectedRows?.stats || {};",
							"const amountAds = stats.amountAds;",
							"",
							"pm.test(\"Check all expected advertisements and amountAds\", function () {",
							"    const expectedAds = [",
							"        { adId: pm.environment.get(\"existing_advertisementId\"),   postId: pm.environment.get(\"existing_postid\"),   type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"existing_advertisementId_2\"), postId: pm.environment.get(\"existing_postid_2\"), type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId\"),            postId: pm.environment.get(\"postidadd\"),         type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_2\"),          postId: pm.environment.get(\"postidadd\"),         type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_3\"),          postId: pm.environment.get(\"postidadd\"),         type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_4\"),          postId: pm.environment.get(\"postidadd\"),         type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_5\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_6\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_7\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_8\"),          postId: pm.environment.get(\"postidadd1\"),        type: \"BASIC\" },",
							"        { adId: pm.environment.get(\"advertisementId_9\"),          postId: pm.environment.get(\"existing_postid\"),   type: \"PINNED\" },",
							"        { adId: pm.environment.get(\"advertisementId_10\"),         postId: pm.environment.get(\"existing_postid_2\"), type: \"PINNED\" }",
							"    ];",
							"",
							"    pm.expect(ads.length, \"Advertisements length mismatch\").to.eql(amountAds);",
							"    pm.expect(amountAds, \"amountAds mismatch with expectedAds\").to.eql(expectedAds.length);",
							"",
							"    expectedAds.forEach(expected => {",
							"        const found = ads.find(a =>",
							"            a.id === expected.adId &&",
							"            a.post.id === expected.postId &&",
							"            a.type === expected.type",
							"        );",
							"        pm.expect(found, `Advertisement ${expected.adId} not found or mismatched`).to.not.be.undefined;",
							"    });",
							"});",
							"",
							"let postId = pm.environment.get(\"postidadd1\");",
							"let adId = pm.environment.get(\"advertisementId_7\");",
							"",
							"pm.test(\"Stats counters = 1\", function () {",
							"    pm.expect(stats.amountLikes).to.eql(1);",
							"    pm.expect(stats.amountViews).to.eql(1);",
							"    pm.expect(stats.amountComments).to.eql(1);",
							"    pm.expect(stats.amountDislikes).to.eql(1);",
							"});",
							"",
							"let advertisement = ads.find(ad => ad.id === adId && ad.type === \"PINNED\");",
							"",
							"pm.test(\"AdvertisementId_7 counters = 1\", function () {",
							"    pm.expect(advertisement, `Advertisement ${adId} not found`).to.not.be.undefined;",
							"    pm.expect(advertisement.amountLikes).to.eql(1);",
							"    pm.expect(advertisement.amountViews).to.eql(1);",
							"    pm.expect(advertisement.amountComments).to.eql(1);",
							"    pm.expect(advertisement.amountDislikes).to.eql(1);",
							"});",
							"",
							"pm.test(\"Post inside AdvertisementId_7 counters = 2\", function () {",
							"    pm.expect(advertisement.post.id).to.eql(postId);",
							"    pm.expect(advertisement.post.amountlikes).to.eql(2);",
							"    pm.expect(advertisement.post.amountviews).to.eql(2);",
							"    pm.expect(advertisement.post.amountcomments).to.eql(2);",
							"    pm.expect(advertisement.post.amountdislikes).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(limit: 20) {\n        status\n        ResponseCode\n        affectedRows {\n            stats {\n                tokenSpent\n                euroSpent\n                amountAds\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                amountReports\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                amountLikes\n                amountViews\n                amountComments\n                amountDislikes\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    url\n                    tags\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}