{
  "info": {
    "_postman_id": "fbb5ae74-edae-44e3-8c3e-17fc50ae2622",
    "name": "2_back_graphql_postman_collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "32542010",
    "_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/43606001-fbb5ae74-edae-44e3-8c3e-17fc50ae2622?action=share&source=collection_link&creator=32542010"
  },
  "item": [
    {
      "name": "Hello",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Null is in there\", function () {",
              "    let responseJson = pm.response.json();",
              "    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
              "});",
              "",
              "pm.test(\"Save companyAccountId as referralUuid\", function () {",
              "    const response = pm.response.json();",
              "    const id = response.data?.hello?.companyAccountId;",
              "",
              "    pm.expect(id, \"companyAccountId should exist\").to.be.a(\"string\").that.is.not.empty;",
              "",
              "    pm.environment.set(\"referralUuid\", id);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Hello {\n    hello {\n        currentuserid\n        currentVersion\n        wikiLink\n        lastMergedPullRequestNumber\n        companyAccountId\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Registration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10601\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "pm.environment.set(\"userid\", response.data.register.userid);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// generate random email",
              "let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
              "",
              "// save",
              "pm.environment.set(\"random_email\", randomEmail);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{w_userid_t2}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Verification",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10701\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "W Login tester 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let liquidity = response.data.balance.currentliquidity;",
              "pm.environment.set(\"liquidity\", liquidity);",
              "console.log(\"Saved liquidity:\", liquidity);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post photo",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(",
              "        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
              "    ).to.be.true;",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              "",
              "let postResponseCode = \"\";",
              "try {",
              "    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
              "} catch (err) {",
              "    console.log(\"Couldn't access ResponseCode:\", err);",
              "}",
              "",
              "if (postResponseCode === \"11513\") {",
              "    pm.environment.set(\"isDailyFreePost\", \"true\");",
              "    console.log(\"This was a Daily Free Post (code 11513).\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreePost\");",
              "    console.log(\"Not a Daily Free Post (code not 11513).\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\", \"{{base64_photo1}}\",\"{{base64_photo2}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if order is correct",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse JSON:\", err);",
              "}",
              "",
              "const post = response?.data?.listPosts?.affectedRows?.[0];",
              "",
              "if (!post || !post.media) {",
              "    console.log(\"No post or media found in response.\");",
              "} else {",
              "    let mediaList = [];",
              "    try {",
              "        mediaList = JSON.parse(post.media);",
              "    } catch (err) {",
              "        console.log(\"Failed to parse media JSON:\", err);",
              "    }",
              "",
              "    if (mediaList.length > 0) {",
              "        // Extract width from resolution",
              "        const widths = mediaList.map(item => {",
              "            const resMatch = item.options.resolution.match(/^(\\d+)x(\\d+)$/);",
              "            if (resMatch) {",
              "                return parseInt(resMatch[1], 10); // only width",
              "            } else {",
              "                return 0;",
              "            }",
              "        });",
              "",
              "        const expectedOrder = [200, 736, 225]; // hardcoded expected widths from your response",
              "",
              "        let isOrderCorrect = true;",
              "        if (widths.length !== expectedOrder.length) {",
              "            isOrderCorrect = false;",
              "            console.log(`Width count mismatch: expected ${expectedOrder.length}, got ${widths.length}`);",
              "        } else {",
              "            for (let i = 0; i < widths.length; i++) {",
              "                if (widths[i] !== expectedOrder[i]) {",
              "                    isOrderCorrect = false;",
              "                    console.log(`Mismatch at index ${i}: expected ${expectedOrder[i]}, got ${widths[i]}`);",
              "                    break;",
              "                }",
              "            }",
              "        }",
              "",
              "        pm.test(\"Media widths are in the expected order\", function () {",
              "            pm.expect(isOrderCorrect).to.be.true;",
              "        });",
              "    } else {",
              "        console.log(\"Media list is empty.\");",
              "        pm.test(\"Media list should not be empty\", function () {",
              "            pm.expect(mediaList.length).to.be.above(0);",
              "        });",
              "    }",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response?.data?.balance?.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "let isDailyFreePost = pm.environment.get(\"isDailyFreePost\");",
              "",
              "console.log(`\ud83d\udcb0 Old Liquidity: ${oldLiquidity}`);",
              "console.log(`\ud83d\udcb0 New Liquidity: ${newLiquidity}`);",
              "console.log(`\ud83c\udd93 isDailyFreePost exists?: ${isDailyFreePost !== undefined}`);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "if (isDailyFreePost !== undefined) {",
              "    console.log(\"\u23e9 This was a Daily Free Post, skipping liquidity check.\");",
              "} else {",
              "    pm.test(\"Liquidity should decrease after spending\", function () {",
              "        pm.expect(newLiquidity).to.be.below(oldLiquidity, \"Expected liquidity to decrease\");",
              "    });",
              "",
              "    pm.test(\"Liquidity decreased by exactly 20\", function () {",
              "        let expectedChange = 20;",
              "        let actualChange = oldLiquidity - newLiquidity;",
              "        pm.expect(actualChange).to.be.closeTo(expectedChange, 0.01, `Expected liquidity to decrease by ${expectedChange}, but got ${actualChange}`);",
              "    });",
              "",
              "    if (newLiquidity !== undefined) {",
              "        pm.environment.set(\"liquidity\", newLiquidity);",
              "    }",
              "}",
              "",
              "pm.environment.unset(\"isDailyFreePost\");",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "packages": {},
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post photo with cover",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\",\"{{base64_photo1}}\",\"{{base64_photo2}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n            cover: \"{{new_profile_pic}}\"\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if cover is not there",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.listPosts?.affectedRows?.[0];",
              "",
              "pm.test(\"Cover field is empty\", function () {",
              "    pm.expect(post.cover).to.eql(\"\", \"Expected 'cover' to be an empty string\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"text's\", mediadescription: \"text's\", contenttype: text, media: [\"{{new_bio}}\"], cover: \"{{base64_photo1}}\" }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if there is no cover and /",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.listPosts?.affectedRows?.[0];",
              "",
              "pm.test(\"Cover field is empty\", function () {",
              "    pm.expect(post.cover).to.eql(\"\", \"Expected 'cover' to be an empty string\");",
              "});",
              "pm.test(\"Title is exactly \\\"text's\\\"\", function () {",
              "    pm.expect(post.title).to.eql(\"text's\");",
              "});",
              "pm.test(\"Media description is exactly \\\"text's\\\"\", function () {",
              "    pm.expect(post.mediadescription).to.eql(\"text's\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post audio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"audio\", contenttype: audio, media: [\"{{base64_audio}}\"], cover: \"{{base64_photo1}}\" }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if cover is there",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.listPosts?.affectedRows?.[0];",
              "",
              "pm.test(\"Cover field is not empty\", function () {",
              "    pm.expect(post.cover).to.be.a(\"string\").and.to.not.eql(\"\", \"Expected 'cover' to be a non-empty string\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post video",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{base64_video}}\"]\n            contenttype: video\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if cover is a first frame",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Cover is a first frame\", function () {",
              "    const response = pm.response.json();",
              "",
              "    const post = response.data?.listPosts?.affectedRows?.[0];",
              "    if (!post) {",
              "        throw new Error(\"No post found.\");",
              "    }",
              "",
              "    let cover;",
              "    try {",
              "        cover = JSON.parse(post.cover);",
              "    } catch (e) {",
              "        throw new Error(\"Failed to parse cover JSON.\");",
              "    }",
              "",
              "    const sizeStr = cover[0]?.options?.size?.replace(\" KB\", \"\");",
              "    const sizeInKB = parseFloat(sizeStr);",
              "",
              "    pm.expect(sizeInKB, \"Cover size should be under 20 KB\").to.be.below(20);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post with tags",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "function generateRandomUsername() {",
              "    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
              "    let username = '';",
              "    for (let i = 0; i < 10; i++) { // Username length (10 characters)",
              "        username += chars.charAt(Math.floor(Math.random() * chars.length));",
              "    }",
              "    return username;",
              "}",
              "",
              "// Generate and save the random username in the environment",
              "let randomUsername = generateRandomUsername();",
              "pm.environment.set(\"tag\", randomUsername);",
              "console.log(\"Generated Random tag:\", randomUsername);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: { title: \"post with tags\", contenttype: image, media: \"{{base64_photo1}}\", tags: [\"{{tag}}\"] }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List tags",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11701\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListTags {\n    listTags(offset: 20, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            name\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if tag is there",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11701\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchTags {\n    searchTags(tagName: \"{{tag}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            name\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "No tags found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"21701\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "function generateRandomUsername() {",
              "    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
              "    let username = '';",
              "    for (let i = 0; i < 10; i++) { // Username length (10 characters)",
              "        username += chars.charAt(Math.floor(Math.random() * chars.length));",
              "    }",
              "    return username;",
              "}",
              "",
              "// Generate and save the random username in the environment",
              "let randomUsername = generateRandomUsername();",
              "pm.environment.set(\"notag\", randomUsername);",
              "console.log(\"Generated Random tag:\", randomUsername);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchTags {\n    searchTags(tagName: \"{{notag}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            name\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Posting with special characters",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"\ud83c\udf89\ud83d\udd25 Test Post! @#$%^&*()\"\n            media: \"{{new_profile_pic}}\"\n            mediadescription: \"Testing special characters: \ud83d\udca1\ud83d\udcdd\u2757\ufe0f\"\n            contenttype: image\n        }\n        action: POST\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media file photo",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11515\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "if (response.uploadedFiles) {",
              "    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
              "    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
              "} else {",
              "    pm.test(\"uploadedFiles field is missing\", function () {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create multipart photo post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.createPost?.affectedRows;",
              "",
              "pm.test(\"Cover field is an empty string\", function () {",
              "    pm.expect(post.cover).to.eql(\"\", \"Expected 'cover' to be an empty string\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"test\"\n            contenttype: video\n            uploadedFiles: \"{{uploadedFiles}}\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create same post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"40305\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"popa\"\n            contenttype: video\n            uploadedFiles: \"{{uploadedFiles}}\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media file video",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11515\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "if (response.uploadedFiles) {",
              "    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
              "    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
              "} else {",
              "    pm.test(\"uploadedFiles field is missing\", function () {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_video.mp4"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create multipart video post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.createPost?.affectedRows;",
              "",
              "pm.test(\"Cover field is not empty\", function () {",
              "    pm.expect(post.cover).not.to.eql(\"\", \"Expected 'cover' to be not empty\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"test\"\n            contenttype: image\n            uploadedFiles: \"{{uploadedFiles}}\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media file audio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11515\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "if (response.uploadedFiles) {",
              "    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
              "    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
              "} else {",
              "    pm.test(\"uploadedFiles field is missing\", function () {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_audio.mp3"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create multipart audio post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(",
              "        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
              "    ).to.be.true;",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              "",
              "let postResponseCode = \"\";",
              "try {",
              "    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
              "} catch (err) {",
              "    console.log(\"Couldn't access ResponseCode:\", err);",
              "}",
              "",
              "if (postResponseCode === \"11513\") {",
              "    pm.environment.set(\"isDailyFreePost\", \"true\");",
              "    console.log(\"This was a Daily Free Post (code 11513).\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreePost\");",
              "    console.log(\"Not a Daily Free Post (code not 11513).\");",
              "}",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.createPost?.affectedRows;",
              "",
              "pm.test(\"Cover field is empty string\", function () {",
              "    pm.expect(post.cover).to.eql(\"\", \"Expected 'cover' to be an empty string\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"test\"\n            contenttype: video\n            uploadedFiles: \"{{uploadedFiles}}\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media file text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11515\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "if (response.uploadedFiles) {",
              "    pm.environment.set(\"uploadedFiles\", response.uploadedFiles);",
              "    console.log(\"uploadedFiles saved as:\", response.uploadedFiles);",
              "} else {",
              "    pm.test(\"uploadedFiles field is missing\", function () {",
              "        pm.expect(false).to.be.true;",
              "    });",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_text.txt"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create multipart text post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(",
              "        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
              "    ).to.be.true;",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let postResponse = {};",
              "try {",
              "    postResponse = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse response as JSON:\", err);",
              "}",
              "",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
              "        if (postId) {",
              "            pm.environment.set(\"postid\", postId);",
              "            console.log(\"postid set to:\", postId);",
              "        } else {",
              "            console.log(\"No postid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Couldn't access post ID:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping postid set.\");",
              "}",
              "",
              "let postResponseCode = \"\";",
              "try {",
              "    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
              "} catch (err) {",
              "    console.log(\"Couldn't access ResponseCode:\", err);",
              "}",
              "",
              "if (postResponseCode === \"11513\") {",
              "    pm.environment.set(\"isDailyFreePost\", \"true\");",
              "    console.log(\"This was a Daily Free Post (code 11513).\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreePost\");",
              "    console.log(\"Not a Daily Free Post (code not 11513).\");",
              "}",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.createPost?.affectedRows;",
              "",
              "pm.test(\"Cover field is empty string\", function () {",
              "    pm.expect(post.cover).to.eql(\"\", \"Expected 'cover' to be an empty string\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"test\"\n            contenttype: video\n            uploadedFiles: \"{{uploadedFiles}}\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media not existing file",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30102\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload media without token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"40902\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload more than 20 photo",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload more than 2 video",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_video.mp4"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload more than 1 text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_text.txt"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload more than 1 audio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_audio.mp3"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload empty file",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"40307\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get eligibility token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10901\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let token = response?.data?.postEligibility?.eligibilityToken;",
              "",
              "if (token) {",
              "    pm.environment.set(\"eligibilityToken\", token);",
              "    console.log(\"Eligibility token saved to environment.\");",
              "} else {",
              "    console.warn(\"Eligibility token not found in response.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query PostEligibility {\n    postEligibility {\n        status\n        ResponseCode\n        eligibilityToken\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload all types of media",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30266\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/etc/newman/media_files/sample_image.jpg"
            }
          ]
        },
        "url": {
          "raw": "https://peer-network.eu/upload-post",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "upload-post"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post fake file",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"40305\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: {\n            title: \"test\"\n            contenttype: video\n            uploadedFiles: \"{{uuid}}.txt\"\n        }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post with more than 10 tags",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30262\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: { title: \"post with tags\", contenttype: image, media: \"{{new_profile_pic}}\", tags: [\"hi\", \"hi1\", \"hi2\", \"hi3\", \"hi4\", \"hi5\", \"hi6\", \"hi7\", \"hi8\", \"hi9\", \"hi10\", \"hi11\"] }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post with too short tag",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30262\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: { title: \"post with tags\", contenttype: image, media: \"{{new_profile_pic}}\", tags: [\"{{long_message}}\"] }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post with too long tag",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30262\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: { title: \"post with tags\", contenttype: image, media: \"{{new_profile_pic}}\", tags: [\"{{long_message}}\"] }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post more than 5 photo (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\",\"{{new_profile_pic}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post more than 1 text (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"text\", contenttype: text, media: [\"{{new_bio}}\", \"{{new_bio}}\", \"{{new_bio}}\"] }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post more than 2 video (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{base64_video}}\",\"{{base64_video}}\",\"{{base64_video}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: video\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post more than 1 audio (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30267\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"audio\", contenttype: audio, media: [\"{{base64_audio}}\", \"{{base64_audio}}\"] }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post more than 1 cover (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30268\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"audio\", contenttype: audio, media: [\"{{base64_audio}}\"], cover: [\"{{base64_photo1}}\", \"{{base64_photo2}}\"] }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post all types of media (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30251\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"all media\", contenttype: image, media: [\"{{base64_audio}}\", \"{{base64_video}}\", \"{{new_bio}}\", \"{{new_profile_pic}}\"] }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post empty title (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30210\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"\"\n            media: \"{{new_profile_pic}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post empty media (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30251\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"empty\"\n            media: \"\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create post too long text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30263\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let longMessage = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \".repeat(100);",
              "pm.environment.set(\"long_message\", longMessage);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: \"{{new_profile_pic}}\"\n            mediadescription: \"{{long_message}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Try posting with an invalid media format (should fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30251\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"Invalid Media Test\"\n            media: \"https://example.com/file.exe\"  \n            mediadescription: \"This should fail due to invalid format\"\n            contenttype: image\n        }\n        action: POST\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "pm.test(\"Liquidity should remain the same\", function () {",
              "    pm.expect(newLiquidity).to.eql(oldLiquidity);",
              "});",
              "",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let commentResponse = {};",
              "try {",
              "    commentResponse = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let commentResponseCode = \"\";",
              "let status = \"\";",
              "",
              "try {",
              "    status = commentResponse?.data?.createComment?.status || \"\";",
              "    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
              "} catch (e) {",
              "    console.log(\"Error accessing response properties:\", e);",
              "}",
              "",
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(status).to.eql(\"success\");",
              "});",
              "",
              "if (commentResponseCode === \"11608\") {",
              "    pm.environment.set(\"isDailyFreeComment\", \"true\");",
              "    console.log(\"This was a Daily Free Comment.\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreeComment\");",
              "    console.log(\"Not a Daily Free Comment.\");",
              "}",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse JSON:\", err);",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
              "        if (commentId) {",
              "            pm.environment.set(\"commentid\", commentId);",
              "            console.log(\"commentid set to:\", commentId);",
              "        } else {",
              "            console.log(\"No commentid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Error extracting commentid:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping commentid set.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{comment_content}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "PostInteractions(LIKE)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let commentResponse = {};",
              "try {",
              "    commentResponse = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let commentResponseCode = \"\";",
              "let status = \"\";",
              "",
              "try {",
              "    status = commentResponse?.data?.createComment?.status || \"\";",
              "    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
              "} catch (e) {",
              "    console.log(\"Error accessing response properties:\", e);",
              "}",
              "",
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(status).to.eql(\"success\");",
              "});",
              "",
              "if (commentResponseCode === \"11608\") {",
              "    pm.environment.set(\"isDailyFreeComment\", \"true\");",
              "    console.log(\"This was a Daily Free Comment.\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreeComment\");",
              "    console.log(\"Not a Daily Free Comment.\");",
              "}",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (err) {",
              "    console.log(\"Failed to parse JSON:\", err);",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    try {",
              "        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
              "        if (commentId) {",
              "            pm.environment.set(\"commentid\", commentId);",
              "            console.log(\"commentid set to:\", commentId);",
              "        } else {",
              "            console.log(\"No commentid found in response.\");",
              "        }",
              "    } catch (err) {",
              "        console.log(\"Error extracting commentid:\", err);",
              "    }",
              "} else {",
              "    console.log(\"Error detected in response, skipping commentid set.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{comment_content}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let newLiquidityAfterComment = response?.data?.balance?.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "let isDailyFreeComment = pm.environment.get(\"isDailyFreeComment\");",
              "let commentResponseCode = response?.data?.createComment?.ResponseCode || \"\";",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "if (isDailyFreeComment !== undefined) {",
              "    console.log(\"\u23e9 This was a Daily Free Comment, skipping liquidity check.\");",
              "} else {",
              "    pm.test(\"Liquidity should decrease after commenting\", function () {",
              "        pm.expect(newLiquidityAfterComment).to.be.below(oldLiquidity);",
              "    });",
              "",
              "    if (newLiquidityAfterComment !== undefined) {",
              "        pm.environment.set(\"liquidity\", newLiquidityAfterComment);",
              "    }",
              "}",
              "",
              "pm.environment.unset(\"isDailyFreeComment\");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check if there is no /",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let post = response?.data?.listPosts?.affectedRows?.[0];",
              "let comment = post.comments[0];",
              "",
              "pm.test(\"Comment content is exactly \\\"myaaaaauuuuu's\\\"\", function () {",
              "    pm.expect(comment.content).to.eql(\"myaaaaauuuuu's\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment with empty(should fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30265\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreateComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment too long text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30265\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let longMessage = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \".repeat(100);",
              "pm.environment.set(\"long_message\", longMessage);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreateComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{long_message}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Like your post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31506\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Dislike your post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31507\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report your post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31508\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Share your post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11507\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: SHARE\n    ) {\n        status\n        ResponseCode\n        \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double share your post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31504\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: SHARE\n    ) {\n        status\n        ResponseCode\n        \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "View your post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31509\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Save your post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11512\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Unsave your post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11511\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Like your comment (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31606\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation LikeComment {\n    likeComment(commentid: \"{{commentid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report your comment (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31607\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response?.data?.balance?.currentliquidity;",
              "let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
              "",
              "console.log(`Old Liquidity: ${oldLiquidity}`);",
              "console.log(`New Liquidity: ${newLiquidity}`);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "pm.test(\"Liquidity should stay the same\", function () {",
              "    pm.expect(newLiquidity).to.equal(oldLiquidity, \"Expected liquidity to stay the same\");",
              "});",
              "",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(\"Updated liquidity in environment:\", newLiquidity);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11211\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let accessToken = pm.environment.get(\"accessToken\") || pm.globals.get(\"accessToken\");",
              "",
              "if (!accessToken) {",
              "    console.log(\"accessToken is missing\");",
              "    throw new Error(\"accessToken is missing in environment or globals.\");",
              "} else {",
              "    console.log(\"accessToken found:\", accessToken);",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{userid}}\", numberoftokens: 5) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer token to yourself",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31202\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{w_userid_t2}}\", numberoftokens: 5) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer token to invalid id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31007\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{uuid}}\", numberoftokens: 5) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer 0 token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"30264\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{w_userid_t3}}\", numberoftokens: 0) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer more than you have",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"51301\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{w_userid_t3}}\", numberoftokens: 100000) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity\");",
              "",
              "oldLiquidity = Number(oldLiquidity);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease by exactly 5 tokens\", function () {",
              "    pm.expect(oldLiquidity - newLiquidity).to.be.closeTo(5, 0.3); ",
              "});",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Call user move",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11205\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListTodaysInteractions {\n    listTodaysInteractions {\n        status\n        ResponseCode\n        affectedRows {\n            totalInteractions\n            totalScore\n            totalDetails {\n                views\n                likes\n                dislikes\n                comments\n                viewsScore\n                likesScore\n                dislikesScore\n                commentsScore\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get referral info",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11011\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetReferralInfo {\n    getReferralInfo {\n        status\n        ResponseCode\n        referralUuid\n        referralLink\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get referral list",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11011\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"ref tester exists\", function () {",
              "    pm.expect(pm.response.text()).to.include(pm.environment.get(\"userid\"));",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ReferralList {\n    referralList(limit: 1) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            invitedBy {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            iInvited {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login referred tester",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = Number(pm.environment.get(\"liquidity2\"));",
              "",
              "console.log(\"Previous liquidity:\", oldLiquidity);",
              "console.log(\"Current liquidity:\", newLiquidity);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "pm.test(\"Liquidity should increase\", function () {",
              "    pm.expect(newLiquidity).to.be.above(oldLiquidity, \"Expected liquidity to increase\");",
              "});",
              "",
              "pm.environment.set(\"liquidity2\", newLiquidity);",
              "console.log(\"Saved new liquidity:\", newLiquidity);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Transfer token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11211\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{w_userid_t3}}\", numberoftokens: 4) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = Number(pm.environment.get(\"liquidity2\"));",
              "",
              "console.log(\"Previous liquidity:\", oldLiquidity);",
              "console.log(\"Current liquidity:\", newLiquidity);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "pm.test(\"Liquidity should decrease\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity, \"Expected liquidity to decrease\");",
              "});",
              "",
              "pm.environment.set(\"liquidity2\", newLiquidity);",
              "console.log(\"Saved new liquidity:\", newLiquidity);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login tester 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity (ref%)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
              "",
              "console.log(\"Previous liquidity:\", oldLiquidity);",
              "console.log(\"Current liquidity:\", newLiquidity);",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "pm.test(\"Liquidity should increase\", function () {",
              "    pm.expect(newLiquidity).to.be.above(oldLiquidity, \"Expected liquidity to increase\");",
              "});",
              "",
              "pm.environment.set(\"liquidity\", newLiquidity);",
              "console.log(\"Saved new liquidity:\", newLiquidity);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Follow tester 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11104\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Account is not followed\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"true\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t3}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login tester 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Search user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchUser {\n    searchUser(userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11008\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetProfile {\n    getProfile(postLimit: 200, userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n            imageposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            textposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            videoposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n            audioposts {\n                id\n                title\n                contenttype\n                media\n                createdat\n            }\n        }\n    }\n}\n\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get post info",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11502\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetPostInfo {\n    getPostInfo(postid: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            likes\n            dislikes\n            reports\n            views\n            saves\n            shares\n            comments\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all posts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Block user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11105\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UserBlock {\n    toggleBlockUserStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm blocking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11107\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"tester1 exists\", function () {",
              "    pm.expect(pm.response.text()).to.include(pm.environment.get(\"w_userid_t2\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Blockedlist {\n    listBlockedUsers {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            iBlocked {\n                userid\n                img\n                username\n                slug\n            }\n            blockedBy {\n                userid\n                img\n                username\n                slug\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"tester1 exists\", function () {",
              "    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"w_userid_t2\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Unblock user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11106\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UserBlock {\n    toggleBlockUserStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm unblocking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11107\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"tester1 exists\", function () {",
              "    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"w_userid_t2\"));",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Blockedlist {\n    listBlockedUsers {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            iBlocked {\n                userid\n                img\n                username\n                slug\n            }\n            blockedBy {\n                userid\n                img\n                username\n                slug\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"tester1 exists\", function () {",
              "    pm.expect(pm.response.text()).to.include(pm.environment.get(\"w_userid_t2\"));",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Getallposts {\n    listPosts(\n        filterBy: null\n        IgnorList: YES\n        sortBy: null\n        userid: null\n        postid: null\n        title: null\n        tag: null\n        from: null\n        to: null\n        offset: null\n        limit: null\n        commentOffset: null\n        commentLimit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity1\");",
              "oldLiquidity = oldLiquidity !== undefined ? Number(oldLiquidity) : undefined;",
              "if (oldLiquidity !== undefined) {",
              "    pm.test(\"Liquidity should increase\", function () {",
              "        pm.expect(newLiquidity).to.be.above(oldLiquidity);",
              "    });",
              "} else {",
              "    console.log(\"No previous liquidity found, skipping increase check.\");",
              "}",
              "pm.environment.set(\"liquidity1\", newLiquidity);",
              "console.log(\"Saved liquidity:\", newLiquidity);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create child comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let commentResponse = {};",
              "try {",
              "    commentResponse = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let commentResponseCode = \"\";",
              "let status = \"\";",
              "",
              "try {",
              "    status = commentResponse?.data?.createComment?.status || \"\";",
              "    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
              "} catch (e) {",
              "    console.log(\"Error accessing response properties:\", e);",
              "}",
              "",
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(status).to.eql(\"success\");",
              "});",
              "",
              "if (commentResponseCode === \"11608\") {",
              "    pm.environment.set(\"isDailyFreeComment\", \"true\");",
              "    console.log(\"This was a Daily Free Comment.\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreeComment\");",
              "    console.log(\"Not a Daily Free Comment.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation CreateComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{comment_content}}\", parentid: \"{{commentid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            commentid\n            userid\n            postid\n            parentid\n            content\n            createdat\n            amountlikes\n            amountreplies\n            isliked\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List child comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11607\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListChildComments {\n    listChildComments(parent: \"{{commentid}}\", offset: null, limit: null) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            commentid\n            userid\n            postid\n            parentid\n            content\n            createdat\n            amountlikes\n            amountreplies\n            isliked\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let newLiquidityAfterComment = response?.data?.balance?.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity1\");",
              "let isDailyFreeComment = pm.environment.get(\"isDailyFreeComment\");",
              "let commentResponseCode = response?.data?.createComment?.ResponseCode || \"\";",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "if (isDailyFreeComment !== undefined) {",
              "    console.log(\"\u23e9 This was a Daily Free Comment, skipping liquidity check.\");",
              "} else {",
              "    pm.test(\"Liquidity should decrease after commenting\", function () {",
              "        pm.expect(newLiquidityAfterComment).to.be.below(oldLiquidity);",
              "    });",
              "",
              "    if (newLiquidityAfterComment !== undefined) {",
              "        pm.environment.set(\"liquidity1\", newLiquidityAfterComment);",
              "    }",
              "}",
              "",
              "pm.environment.unset(\"isDailyFreeComment\");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Like post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let likeResponse = {};",
              "try {",
              "    likeResponse = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let likeResponseCode = \"\";",
              "let status = \"\";",
              "",
              "try {",
              "    status = likeResponse?.data?.resolvePostAction?.status || \"\";",
              "    likeResponseCode = likeResponse?.data?.resolvePostAction?.ResponseCode || \"\";",
              "} catch (e) {",
              "    console.log(\"Error accessing response properties:\", e);",
              "}",
              "",
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect([\"11503\", \"11514\"]).to.include(likeResponseCode);",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(status).to.eql(\"success\");",
              "});",
              "",
              "if (likeResponseCode === \"11514\") {",
              "    pm.environment.set(\"isDailyFreeLike\", \"true\");",
              "    console.log(\"This was a Daily Free Like.\");",
              "} else {",
              "    pm.environment.unset(\"isDailyFreeLike\");",
              "    console.log(\"Not a Daily Free Like.\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let newLiquidityAfterLike = response?.data?.balance?.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity1\");",
              "let isDailyFreeLike = pm.environment.get(\"isDailyFreeLike\");",
              "let likeResponseCode = response?.data?.resolveActionPost?.ResponseCode || \"\";",
              "",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "",
              "if (isDailyFreeLike !== undefined) {",
              "    console.log(\"\u23e9 This was a Daily Free Like, skipping liquidity check.\");",
              "} else {",
              "    pm.test(\"Liquidity should decrease after liking\", function () {",
              "        pm.expect(newLiquidityAfterLike).to.be.below(oldLiquidity);",
              "    });",
              "",
              "    if (newLiquidityAfterLike !== undefined) {",
              "        pm.environment.set(\"liquidity1\", newLiquidityAfterLike);",
              "    }",
              "}",
              "",
              "pm.environment.unset(\"isDailyFreeLike\");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double like (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let currentLiquidity = response.data.balance.currentliquidity;",
              "let previousLiquidity = pm.environment.get(\"liquidity1\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(previousLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should remain the same\", function () {",
              "    pm.expect(currentLiquidity).to.eql(previousLiquidity);",
              "});",
              "console.log(`Previous Liquidity: ${previousLiquidity}, Current Liquidity: ${currentLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Dislike post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11504\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let newLiquidity = response.data.balance.currentliquidity;",
              "let oldLiquidity = pm.environment.get(\"liquidity1\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(oldLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should decrease after spending\", function () {",
              "    pm.expect(newLiquidity).to.be.below(oldLiquidity);",
              "});",
              "pm.environment.set(\"liquidity1\", newLiquidity);",
              "console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double dislike (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31502\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n    }",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let currentLiquidity = response.data.balance.currentliquidity;",
              "let previousLiquidity = pm.environment.get(\"liquidity1\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(previousLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should remain the same\", function () {",
              "    pm.expect(currentLiquidity).to.eql(previousLiquidity);",
              "});",
              "console.log(`Previous Liquidity: ${previousLiquidity}, Current Liquidity: ${currentLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Share post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11507\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: SHARE\n    ) {\n        status\n        ResponseCode\n        \n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double share post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31504\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: SHARE\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "View post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11506\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double view post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31505\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Save post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11512\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Unsave post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11511\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Like invalid commentid",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31601\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation LikeComment {\n    likeComment(commentid: \"{{uuid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Like comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11603\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation LikeComment {\n    likeComment(commentid: \"{{commentid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double like comment (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31604\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation LikeComment {\n    likeComment(commentid: \"{{commentid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check current liquidity",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11204\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "let currentLiquidity = response.data.balance.currentliquidity;",
              "let previousLiquidity = pm.environment.get(\"liquidity1\");",
              "pm.test(\"Previous liquidity exists\", function () {",
              "    pm.expect(previousLiquidity).to.be.a(\"number\");",
              "});",
              "pm.test(\"Liquidity should remain the same\", function () {",
              "    pm.expect(currentLiquidity).to.eql(previousLiquidity);",
              "});",
              "console.log(`Previous Liquidity: ${previousLiquidity}, Current Liquidity: ${currentLiquidity}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List post amount of objects",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const json = pm.response.json();",
              "const posts = json?.data?.listPosts?.affectedRows || [];",
              "",
              "const postCount = posts.length;",
              "let commentCount = 0;",
              "",
              "posts.forEach(post => {",
              "    if (Array.isArray(post.comments)) {",
              "        commentCount += post.comments.length;",
              "    }",
              "});",
              "",
              "pm.environment.set(\"noFilter_post_count\", postCount);",
              "pm.environment.set(\"noFilter_comment_count\", commentCount);",
              "",
              "console.log(`Saved from unfiltered list: posts = ${postCount}, comments = ${commentCount}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11604\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List post amount of objects (MYGRANDMALIKES)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const json = pm.response.json();",
              "const posts = json?.data?.listPosts?.affectedRows || [];",
              "",
              "const filteredPostCount = posts.length;",
              "let filteredCommentCount = 0;",
              "let hiddenCommentCount = 0;",
              "",
              "posts.forEach(post => {",
              "    if (Array.isArray(post.comments)) {",
              "        post.comments.forEach(comment => {",
              "            filteredCommentCount++;",
              "            if (comment.content === \"this comment is hidden\") {",
              "                hiddenCommentCount++;",
              "            }",
              "        });",
              "    }",
              "});",
              "",
              "const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
              "const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
              "",
              "pm.test(\"Post count is the same with and without filter\", function () {",
              "    pm.expect(filteredPostCount).to.eql(originalPostCount);",
              "});",
              "",
              "pm.test(\"Comment count is the same with and without filter\", function () {",
              "    pm.expect(filteredCommentCount).to.eql(originalCommentCount);",
              "});",
              "",
              "pm.test(\"Exactly one comment is marked as hidden\", function () {",
              "    pm.expect(hiddenCommentCount).to.eql(1);",
              "});",
              "",
              "console.log(`With filter: posts = ${filteredPostCount}, comments = ${filteredCommentCount}, hiddenComments = ${hiddenCommentCount}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List post amount of objects(without filter)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const json = pm.response.json();",
              "const posts = json?.data?.listPosts?.affectedRows || [];",
              "",
              "let currentPostCount = posts.length;",
              "let currentCommentCount = 0;",
              "",
              "posts.forEach(post => {",
              "    if (Array.isArray(post.comments)) {",
              "        currentCommentCount += post.comments.length;",
              "    }",
              "});",
              "",
              "const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
              "const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
              "",
              "pm.test(\"Post count unchanged after comment report (unfiltered)\", function () {",
              "    pm.expect(currentPostCount).to.eql(originalPostCount);",
              "});",
              "",
              "pm.test(\"Comment count unchanged after comment report (unfiltered)\", function () {",
              "    pm.expect(currentCommentCount).to.eql(originalCommentCount);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double report comment (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31605\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm comment is not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedCommentId = pm.environment.get(\"commentid\");",
              "",
              "    if (!expectedCommentId) {",
              "        throw new Error(\"Environment variable 'commentid' is not set.\");",
              "    }",
              "",
              "    let commentFound = null;",
              "",
              "    for (const post of posts) {",
              "        const comments = post.comments || [];",
              "        commentFound = comments.find(c => c.commentid === expectedCommentId);",
              "        if (commentFound) break;",
              "    }",
              "",
              "    if (!commentFound) {",
              "        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
              "    }",
              "",
              "    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm comment is seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Comment content for commentid from env is 'myaaaaauuuuu's'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedCommentId = pm.environment.get(\"commentid\");",
              "",
              "    if (!expectedCommentId) {",
              "        throw new Error(\"Environment variable 'commentid' is not set.\");",
              "    }",
              "",
              "    let commentFound = null;",
              "",
              "    for (const post of posts) {",
              "        const comments = post.comments || [];",
              "        commentFound = comments.find(c => c.commentid === expectedCommentId);",
              "        if (commentFound) break;",
              "    }",
              "",
              "    if (!commentFound) {",
              "        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
              "    }",
              "",
              "    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"myaaaaauuuuu's\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login referred tester",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm comment is not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedCommentId = pm.environment.get(\"commentid\");",
              "",
              "    if (!expectedCommentId) {",
              "        throw new Error(\"Environment variable 'commentid' is not set.\");",
              "    }",
              "",
              "    let commentFound = null;",
              "",
              "    for (const post of posts) {",
              "        const comments = post.comments || [];",
              "        commentFound = comments.find(c => c.commentid === expectedCommentId);",
              "        if (commentFound) break;",
              "    }",
              "",
              "    if (!commentFound) {",
              "        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
              "    }",
              "",
              "    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm comment is seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Comment content for commentid from env is 'myaaaaauuuuu's'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedCommentId = pm.environment.get(\"commentid\");",
              "",
              "    if (!expectedCommentId) {",
              "        throw new Error(\"Environment variable 'commentid' is not set.\");",
              "    }",
              "",
              "    let commentFound = null;",
              "",
              "    for (const post of posts) {",
              "        const comments = post.comments || [];",
              "        commentFound = comments.find(c => c.commentid === expectedCommentId);",
              "        if (commentFound) break;",
              "    }",
              "",
              "    if (!commentFound) {",
              "        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
              "    }",
              "",
              "    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"myaaaaauuuuu's\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login tester 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11505\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List post amount of objects after report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "const json = pm.response.json();",
              "const posts = json?.data?.listPosts?.affectedRows || [];",
              "",
              "let currentPostCount = posts.length;",
              "let currentCommentCount = 0;",
              "",
              "posts.forEach(post => {",
              "    if (Array.isArray(post.comments)) {",
              "        currentCommentCount += post.comments.length;",
              "    }",
              "});",
              "",
              "const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
              "const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
              "",
              "pm.test(\"Post count dropped by exactly 1\", function () {",
              "    const diff = originalPostCount - currentPostCount;",
              "    pm.expect(diff).to.eql(1);",
              "});",
              "",
              "pm.test(\"Comment count dropped by exactly 1\", function () {",
              "    const diff = originalCommentCount - currentCommentCount;",
              "    pm.expect(diff).to.eql(1);",
              "});",
              "",
              "console.log(`Posts: ${originalPostCount} \u2192 ${currentPostCount}`);",
              "console.log(`Comments: ${originalCommentCount} \u2192 ${currentCommentCount}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double Report Post (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31503\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm post is not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Post is not there\", function () {",
              "    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"postid\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm post is seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Post is not there\", function () {",
              "    pm.expect(pm.response.text()).to.include(pm.environment.get(\"postid\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login referred tester",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm post is not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Post is not there\", function () {",
              "    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"postid\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm post is seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Post is not there\", function () {",
              "    pm.expect(pm.response.text()).to.include(pm.environment.get(\"postid\"));",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login tester 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11012\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Double report user (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31008\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Report yourself (fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"31009\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t3}}\") {\n        status\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"All posts by w_userid_t2 have username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    posts.forEach(post => {",
              "        if (post.user?.id === expectedUserId) {",
              "            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"hidden_account\");",
              "        }",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listUsers",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listUsers has username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.listUsers?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm searchUser",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.searchUser?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm getProfile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11008\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"getProfile returns 'hidden_account' for w_userid_t2\", function () {",
              "    const response = pm.response.json();",
              "    const profile = response.data?.getProfile?.affectedRows;",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    if (!profile || profile.id !== expectedUserId) {",
              "        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
              "    }",
              "",
              "    pm.expect(profile.username, `User ${profile.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"All posts by w_userid_t2 have username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    posts.forEach(post => {",
              "        if (post.user?.id === expectedUserId) {",
              "            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"tester02\");",
              "        }",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listUsers without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listUsers has username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.listUsers?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListUsers {\n    listUsers(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm searchUser without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.searchUser?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchUser {\n    searchUser(userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm getProfile without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11008\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"getProfile returns 'tester02' for w_userid_t2\", function () {",
              "    const response = pm.response.json();",
              "    const profile = response.data?.getProfile?.affectedRows;",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    if (!profile || profile.id !== expectedUserId) {",
              "        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
              "    }",
              "",
              "    pm.expect(profile.username, `User ${profile.id} should have username 'tester02'`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Follow tester 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11104\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Account is not followed\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"true\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listFollowRelations",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11101\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in followers and following has username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const relations = response.data?.listFollowRelations?.affectedRows || {};",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const checkList = (listName) => {",
              "        const list = relations[listName] || [];",
              "        const user = list.find(u => u.id === expectedUserId);",
              "",
              "        if (!user) {",
              "            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
              "        }",
              "",
              "        pm.expect(user.username, `User ${user.id} in ${listName} should be 'hidden_account'`).to.eql(\"hidden_account\");",
              "    };",
              "",
              "    checkList(\"followers\");",
              "    checkList(\"following\");",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListFollowRelations {\n    listFollowRelations(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listFriends",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11102\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listFriends has username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const friends = response.data?.listFriends?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = friends.find(u => u.userid === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `Friend ${user.userid} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListFriends {\n    listFriends(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listFollowRelations without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11101\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in followers and following has username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const relations = response.data?.listFollowRelations?.affectedRows || {};",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const checkList = (listName) => {",
              "        const list = relations[listName] || [];",
              "        const user = list.find(u => u.id === expectedUserId);",
              "",
              "        if (!user) {",
              "            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
              "        }",
              "",
              "        pm.expect(user.username, `User ${user.id} in ${listName} should be 'tester02'`).to.eql(\"tester02\");",
              "    };",
              "",
              "    checkList(\"followers\");",
              "    checkList(\"following\");",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListFollowRelations {\n    listFollowRelations {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listFriends without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11102\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listFriends has username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const friends = response.data?.listFriends?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = friends.find(u => u.userid === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `Friend ${user.userid} should have username 'tester02'`).to.eql(\"tester02\");",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListFriends {\n    listFriends {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login referred tester",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"10801\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = pm.response.json();",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "if (!pm.response.text().includes(\"error\")) {",
              "    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
              "} else {",
              "    console.log(\"Error detected in response, environment variable not set.\");",
              "}",
              "let token = pm.environment.get(\"accessToken\");",
              "pm.test(\"Access token exists\", function () {",
              "    pm.expect(token).to.be.a(\"string\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are not seen",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"All posts by w_userid_t2 have username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    posts.forEach(post => {",
              "        if (post.user?.id === expectedUserId) {",
              "            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"hidden_account\");",
              "        }",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listUsers",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listUsers has username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.listUsers?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm searchUser",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.searchUser?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm getProfile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11008\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"getProfile returns 'hidden_account' for w_userid_t2\", function () {",
              "    const response = pm.response.json();",
              "    const profile = response.data?.getProfile?.affectedRows;",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    if (!profile || profile.id !== expectedUserId) {",
              "        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
              "    }",
              "",
              "    pm.expect(profile.username, `User ${profile.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm posts are seen without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11501\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"All posts by w_userid_t2 have username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const posts = response.data?.listPosts?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    posts.forEach(post => {",
              "        if (post.user?.id === expectedUserId) {",
              "            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"tester02\");",
              "        }",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm listUsers without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User from w_userid_t2 in listUsers has username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.listUsers?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should have username 'tester02'`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListUsers {\n    listUsers(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm searchUser without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11009\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
              "    const response = pm.response.json();",
              "    const users = response.data?.searchUser?.affectedRows || [];",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    const user = users.find(u => u.id === expectedUserId);",
              "",
              "    if (!user) {",
              "        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
              "    }",
              "",
              "    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query SearchUser {\n    searchUser(userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Confirm getProfile without filter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11008\");",
              "});",
              "",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"getProfile returns 'tester02' for w_userid_t2\", function () {",
              "    const response = pm.response.json();",
              "    const profile = response.data?.getProfile?.affectedRows;",
              "    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
              "",
              "    if (!expectedUserId) {",
              "        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
              "    }",
              "",
              "    if (!profile || profile.id !== expectedUserId) {",
              "        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
              "    }",
              "",
              "    pm.expect(profile.username, `User ${profile.id} should have username 'tester02'`).to.eql(\"tester02\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11002\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Check contentFilteringSeverityLevel = MYGRANDMALIKES\", function () {",
              "    const response = pm.response.json();",
              "    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
              "",
              "    pm.expect(level, \"contentFilteringSeverityLevel should be MYGRANDMALIKES\")",
              "        .to.eql(\"MYGRANDMALIKES\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11014\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMAHATES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11002\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Check contentFilteringSeverityLevel = MYGRANDMAHATES\", function () {",
              "    const response = pm.response.json();",
              "    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
              "",
              "    pm.expect(level, \"contentFilteringSeverityLevel should be MYGRANDMAHATES\")",
              "        .to.eql(\"MYGRANDMAHATES\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11014\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMALIKES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11002\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "pm.test(\"Check contentFilteringSeverityLevel = MYGRANDMALIKES\", function () {",
              "    const response = pm.response.json();",
              "    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
              "",
              "    pm.expect(level, \"contentFilteringSeverityLevel should be MYGRANDMALIKES\")",
              "        .to.eql(\"MYGRANDMALIKES\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get comment info",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11602\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});",
              "",
              "let response = {};",
              "try {",
              "    response = pm.response.json();",
              "} catch (e) {",
              "    console.log(\"Failed to parse JSON:\", e);",
              "}",
              "",
              "let affectedRows = response?.data?.getCommentInfo?.affectedRows || {};",
              "let likes = affectedRows.likes;",
              "let reports = affectedRows.reports;",
              "let comments = affectedRows.comments;",
              "",
              "pm.test(\"Likes count is exactly 1\", function () {",
              "    pm.expect(likes).to.eql(1);",
              "});",
              "",
              "pm.test(\"Reports count is exactly 1\", function () {",
              "    pm.expect(reports).to.eql(1);",
              "});",
              "",
              "pm.test(\"Comments count is exactly 1\", function () {",
              "    pm.expect(comments).to.eql(1);",
              "});",
              "",
              "console.log(`Likes: ${likes}, Reports: ${reports}, Comments: ${comments}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query GetCommentInfo {\n    getCommentInfo(commentId: \"{{commentid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            likes\n            reports\n            comments\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fetchpayslog",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"21202\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ListPaymentLogs {\n    listPaymentLogs(day: D0) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            from\n            token\n            userid\n            postid\n            action\n            numbers\n            createdat\n        }\n    }\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Fetchwinslog",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ResponseCode is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include(\"11203\");",
              "});",
              "pm.test(\"Status is correct\", function () {",
              "    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query Fetchwinslog {\n    listWinLogs(day: D0) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            from\n            token\n            userid\n            postid\n            action\n            numbers\n            createdat\n        }\n    }\n}",
            "variables": ""
          }
        },
        "url": {
          "raw": "https://peer-network.eu/graphql",
          "protocol": "https",
          "host": [
            "peer-network",
            "eu"
          ],
          "path": [
            "graphql"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "let accessToken = pm.environment.get(\"accessToken\")"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "pm.test(\"Query is successful\", function () {",
          "    pm.response.to.have.status(200);",
          "});"
        ]
      }
    }
  ]
}