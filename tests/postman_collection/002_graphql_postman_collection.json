{
	"info": {
		"_postman_id": "9bcbacb8-46bf-4df6-a52c-478e305a6182",
		"name": "AHMED 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32542010",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/32542010-9bcbacb8-46bf-4df6-a52c-478e305a6182?action=share&source=collection_link&creator=32542010"
	},
	"item": [
		{
			"name": "Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid\", response.data.register.userid);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"random_email\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  register(input: {\n    email: \"{{random_email}}\",\n    password: \"{{password}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{w_userid_t2}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "W Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(",
							"        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
							"    ).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							"",
							"let postResponseCode = \"\";",
							"try {",
							"    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
							"} catch (err) {",
							"    console.log(\"Couldn't access ResponseCode:\", err);",
							"}",
							"",
							"if (postResponseCode === \"11513\") {",
							"    pm.environment.set(\"isDailyFreePost\", \"true\");",
							"    console.log(\"This was a Daily Free Post (code 11513).\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreePost\");",
							"    console.log(\"Not a Daily Free Post (code not 11513).\");",
							"}",
							"",
							"// ✅ Validate resolutions of all three media items",
							"pm.test(\"All uploaded image resolutions are correct\", function () {",
							"    try {",
							"        const expectedResolutions = [\"200x300\", \"736x413\", \"225x225\"];",
							"        const mediaString = postResponse?.data?.createPost?.affectedRows?.media;",
							"        const mediaArray = JSON.parse(mediaString);",
							"",
							"        pm.expect(mediaArray.length, \"Expected 3 media items\").to.eql(3);",
							"",
							"        for (let i = 0; i < expectedResolutions.length; i++) {",
							"            const actual = mediaArray[i]?.options?.resolution;",
							"            const expected = expectedResolutions[i];",
							"",
							"            pm.expect(actual, `Media[${i}] resolution should be ${expected}`).to.eql(expected);",
							"        }",
							"    } catch (err) {",
							"        console.error(\"Error validating media resolutions:\", err);",
							"        throw new Error(\"Failed to validate media resolutions.\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\", \"{{base64_photo1}}\",\"{{base64_photo2}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post photo with cover",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{new_profile_pic}}\",\"{{base64_photo1}}\",\"{{base64_photo2}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n            cover: \"{{new_profile_pic}}\"\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"text's\", mediadescription: \"text's\", contenttype: text, media: [\"{{new_bio}}\"], cover: \"{{base64_photo1}}\" }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post audio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(action: POST, input: { title: \"audio\", contenttype: audio, media: [\"{{base64_audio}}\"], cover: \"{{base64_photo1}}\" }) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post video",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							"",
							"pm.test(\"Save (createdat + 1 day) as startday\", function () {",
							"    const createdAt = pm.response.json()?.data?.createPost?.affectedRows?.createdat;",
							"",
							"    pm.expect(createdAt, \"createdat should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    const date = new Date(createdAt);",
							"    date.setDate(date.getDate() + 1);",
							"",
							"    const yyyy = date.getFullYear();",
							"    const mm = String(date.getMonth() + 1).padStart(2, \"0\");",
							"    const dd = String(date.getDate()).padStart(2, \"0\");",
							"",
							"    const nextDay = `${yyyy}-${mm}-${dd}`;",
							"",
							"    pm.environment.set(\"startday\", nextDay);",
							"});",
							"// ✅ Validate video resolution with hardcoded expected value",
							"pm.test(\"Video resolution matches expected (720x1280)\", function () {",
							"    try {",
							"        const expectedResolution = \"720x1280\"; // 👈 set directly here",
							"",
							"        const affected = postResponse?.data?.createPost?.affectedRows;",
							"        const mediaJson = affected?.media;",
							"",
							"        if (!mediaJson) {",
							"            throw new Error(\"Missing media array in response.\");",
							"        }",
							"",
							"        const mediaArray = JSON.parse(mediaJson);",
							"        if (!Array.isArray(mediaArray) || !mediaArray[0]) {",
							"            throw new Error(\"Media array is empty or invalid.\");",
							"        }",
							"",
							"        const actualResolution = mediaArray[0]?.options?.resolution;",
							"",
							"        pm.expect(actualResolution, `Expected resolution to be ${expectedResolution} but got ${actualResolution}`)",
							"          .to.eql(expectedResolution);",
							"    } catch (err) {",
							"        console.error(\"Video resolution test failed:\", err.message || err);",
							"        throw new Error(\"Video resolution test failed. See console for details.\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"meowwwww\"\n            media: [\"{{base64_video}}\"]\n            contenttype: video\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post with tags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"owners_post_postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomUsername() {",
							"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
							"    let username = '';",
							"    for (let i = 0; i < 10; i++) { // Username length (10 characters)",
							"        username += chars.charAt(Math.floor(Math.random() * chars.length));",
							"    }",
							"    return username;",
							"}",
							"",
							"// Generate and save the random username in the environment",
							"let randomUsername = generateRandomUsername();",
							"pm.environment.set(\"tag\", randomUsername);",
							"console.log(\"Generated Random tag:\", randomUsername);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        action: POST\n        input: { title: \"post with tags\", contenttype: image, media: \"{{base64_photo1}}\", tags: [\"{{tag}}\"] }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posting with special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"🎉🔥 Test Post! @#$%^&*()\"\n            media: \"{{new_profile_pic}}\"\n            mediadescription: \"Testing special characters: 💡📝❗️\"\n            contenttype: image\n        }\n        action: POST\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "W Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let commentResponse = {};",
							"try {",
							"    commentResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let commentResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = commentResponse?.data?.createComment?.status || \"\";",
							"    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (commentResponseCode === \"11608\") {",
							"    pm.environment.set(\"isDailyFreeComment\", \"true\");",
							"    console.log(\"This was a Daily Free Comment.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeComment\");",
							"    console.log(\"Not a Daily Free Comment.\");",
							"}",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse JSON:\", err);",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
							"        if (commentId) {",
							"            pm.environment.set(\"commentid\", commentId);",
							"            console.log(\"commentid set to:\", commentId);",
							"        } else {",
							"            console.log(\"No commentid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Error extracting commentid:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping commentid set.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{comment_content}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transfer token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11211\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let accessToken = pm.environment.get(\"accessToken\") || pm.globals.get(\"accessToken\");",
							"",
							"if (!accessToken) {",
							"    console.log(\"accessToken is missing\");",
							"    throw new Error(\"accessToken is missing in environment or globals.\");",
							"} else {",
							"    console.log(\"accessToken found:\", accessToken);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{userid}}\", numberoftokens: 5) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transfer token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11211\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveTransfer {\n    resolveTransfer(recipient: \"{{w_userid_t3}}\", numberoftokens: 4) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t3}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Block user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11105\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserBlock {\n    toggleBlockUserStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unblock user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11106\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserBlock {\n    toggleBlockUserStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create child comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let commentResponse = {};",
							"try {",
							"    commentResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let commentResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = commentResponse?.data?.createComment?.status || \"\";",
							"    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (commentResponseCode === \"11608\") {",
							"    pm.environment.set(\"isDailyFreeComment\", \"true\");",
							"    console.log(\"This was a Daily Free Comment.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeComment\");",
							"    console.log(\"Not a Daily Free Comment.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"{{comment_content}}\", parentid: \"{{commentid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            commentid\n            userid\n            postid\n            parentid\n            content\n            createdat\n            amountlikes\n            amountreplies\n            isliked\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let likeResponse = {};",
							"try {",
							"    likeResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let likeResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = likeResponse?.data?.resolvePostAction?.status || \"\";",
							"    likeResponseCode = likeResponse?.data?.resolvePostAction?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11503\", \"11514\"]).to.include(likeResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (likeResponseCode === \"11514\") {",
							"    pm.environment.set(\"isDailyFreeLike\", \"true\");",
							"    console.log(\"This was a Daily Free Like.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeLike\");",
							"    console.log(\"Not a Daily Free Like.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dislike post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11504\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Share post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11507\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: SHARE\n    ) {\n        status\n        ResponseCode\n        \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "View post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11506\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11512\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsave post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11511\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolvePostAction {\n    resolvePostAction(action: SAVE, postid: \"{{postid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11603\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation LikeComment {\n    likeComment(commentid: \"{{commentid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login referred tester",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login referred tester",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login referred tester",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{random_email}}\", password: \"{{password}}\") {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11014\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMAHATES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11014\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMALIKES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise post 0 liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"51301\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{owners_post_postid}}\"\n        startday: \"{{startday}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t1\");",
							"let expectedPostId = pm.environment.get(\"existing_postid\");",
							"let expectedAdId = pm.environment.get(\"existing_advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId ",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let liquidity = response.data.balance.currentliquidity;",
							"pm.environment.set(\"liquidity\", liquidity);",
							"console.log(\"Saved liquidity:\", liquidity);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30209\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"hi\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31510\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{uuid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postid}}\"\n        startday: \"{{startday}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BSIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise previous date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32008\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postid}}\"\n        startday: \"2025-06-22\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32008\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postid}}\"\n        startday: \"2025-0622\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise invalid duration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{postid}}\"\n        startday: \"2030-07-23\"\n        durationInDays: DAY\n        advertisePlan: BASIC\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"30209\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"hi\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31510\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{uuid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin invalid plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{postid}}\"\n        advertisePlan: PINED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t1\");",
							"let expectedPostId = pm.environment.get(\"existing_postid\");",
							"let expectedAdId = pm.environment.get(\"existing_advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId ",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{not_owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedDay = pm.environment.get(\"startday\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId &&",
							"        ad.timeframeStart.startsWith(expectedDay) &&",
							"        ad.timeframeEnd.startsWith(expectedDay)",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 5000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 5000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post diff time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 2);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{not_owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedDay = pm.environment.get(\"diffstartday\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId &&",
							"        ad.timeframeStart.startsWith(expectedDay) &&",
							"        ad.timeframeEnd.startsWith(expectedDay)",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 5000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 5000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise other's post same time (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{not_owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin other's post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{not_owners_post_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 20000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 20000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin twice not forcing (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{owners_post_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: false\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin twice forcing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{owners_post_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 20000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 20000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise own post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{startday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedDay = pm.environment.get(\"startday\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId &&",
							"        ad.timeframeStart.startsWith(expectedDay) &&",
							"        ad.timeframeEnd.startsWith(expectedDay)",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 5000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 5020\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise own post diff time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 2);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{owners_post_postid}}\"\n        durationInDays: SEVEN_DAYS\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedDay = pm.environment.get(\"diffstartday\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId &&",
							"        ad.timeframeStart.startsWith(expectedDay) &&",
							"        ad.timeframeEnd.startsWith(expectedDay)",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 35000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 35000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let posts = res?.data?.listPosts?.affectedRows ?? [];",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"Created post exists in listPosts\", function () {",
							"    let exists = posts.some(p => p.id === expectedPostId);",
							"    pm.expect(exists).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise same time twice (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin own post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{owners_post_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 20000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 20000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Advertise after pin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostBasic?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let startDayStr = pm.environment.get(\"startday\"); ",
							"let startDate = new Date(startDayStr);",
							"",
							"startDate.setDate(startDate.getDate() + 9);",
							"",
							"let diffStartDay = startDate.toISOString().split(\"T\")[0];",
							"",
							"pm.environment.set(\"diffstartday\", diffStartDay);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostBasic {\n    advertisePostBasic(\n        postid: \"{{owners_post_postid}}\"\n        durationInDays: ONE_DAY\n        advertisePlan: BASIC\n        startday: \"{{diffstartday}}\"\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"let expectedDay = pm.environment.get(\"diffstartday\");",
							"let expectedAdId = pm.environment.get(\"advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId &&",
							"        ad.timeframeStart.startsWith(expectedDay) &&",
							"        ad.timeframeEnd.startsWith(expectedDay)",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 5000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 5020\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check posts order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let firstPostId = response?.data?.listPosts?.affectedRows?.[0]?.id;",
							"let expectedPostId = pm.environment.get(\"owners_post_postid\");",
							"",
							"pm.test(\"First post ID matches 'owners_post_postid' from environment\", function () {",
							"    pm.expect(firstPostId, \"First post ID does not match\").to.eql(expectedPostId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            type\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin advertised post not forcing (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"32018\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{existing_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: false\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = Number(pm.environment.get(\"liquidity\"));",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Liquidity should remain the same\", function () {",
							"    pm.expect(newLiquidity).to.eql(oldLiquidity);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pin advertised post forcing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12001\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let adId = response?.data?.advertisePostPinned?.affectedRows?.[0]?.id;",
							"",
							"if (adId) {",
							"    pm.environment.set(\"advertisementId\", adId);",
							"    console.log(\"Saved advertisementId:\", adId);",
							"} else {",
							"    console.warn(\"advertisementId not found in response.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AdvertisePostPinned {\n    advertisePostPinned(\n        postid: \"{{existing_postid}}\"\n        advertisePlan: PINNED\n        forceUpdate: true\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            createdAt\n            type\n            creatorId\n            postId\n            timeframeStart\n            timeframeEnd\n            totalTokenCost\n            totalEuroCost\n            gemsEarned\n            views\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check current liquidity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11204\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"let newLiquidity = response.data.balance.currentliquidity;",
							"let oldLiquidity = pm.environment.get(\"liquidity\");",
							"",
							"pm.test(\"Previous liquidity exists\", function () {",
							"    pm.expect(oldLiquidity).to.not.be.undefined;",
							"    pm.expect(Number(oldLiquidity)).to.be.a(\"number\");",
							"});",
							"",
							"let expectedDifference = 16000;",
							"let actualDifference = Number(oldLiquidity) - Number(newLiquidity);",
							"",
							"pm.test(\"Liquidity should decrease exactly by 16000\", function () {",
							"    pm.expect(actualDifference).to.equal(expectedDifference);",
							"});",
							"",
							"pm.environment.set(\"liquidity\", newLiquidity);",
							"",
							"console.log(`Old Liquidity: ${oldLiquidity}, New Liquidity: ${newLiquidity}, Difference: ${actualDifference}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Balance {\n    balance {\n        status\n        ResponseCode\n        currentliquidity\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get add history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let res = pm.response.json();",
							"let ads = res?.data?.advertisementHistory?.affectedRows?.advertisements ?? [];",
							"",
							"let expectedCreatorId = pm.environment.get(\"w_userid_t2\");",
							"let expectedPostId = pm.environment.get(\"existing_postid\");",
							"let expectedAdId = pm.environment.get(\"existing_advertisementId\");",
							"",
							"pm.test(\"Advertisement exists with correct creatorId, postId, timeframe, and advertisementId\", function () {",
							"    let match = ads.some(ad =>",
							"        ad.creatorId === expectedCreatorId &&",
							"        ad.postId === expectedPostId &&",
							"        ad.id === expectedAdId",
							"    );",
							"",
							"    pm.expect(match).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AdvertisementHistory {\n    advertisementHistory(\n        filter: {\n            from: null\n            to: null\n            type: null\n            advertisementId: null\n            postId: null\n            userId: null\n        }\n        sort: null\n        offset: null\n        limit: null\n    ) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            stats {\n                totalTokenSpent\n                totalEuroSpent\n                totalAds\n                totalGemsEarned\n            }\n            advertisements {\n                id\n                createdAt\n                type\n                creatorId\n                postId\n                timeframeStart\n                timeframeEnd\n                totalTokenCost\n                totalEuroCost\n                gemsEarned\n                views\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}