{
	"info": {
		"_postman_id": "9cbdfc1a-6d2c-47e4-8632-a0131b4a7c7b",
		"name": "005_moderation_graphql",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43606001",
		"_collection_link": "https://automated-testing-with-taso.postman.co/workspace/Peer-Workspace~a910b484-5e62-449c-9ff4-504470bc690f/collection/43606001-9cbdfc1a-6d2c-47e4-8632-a0131b4a7c7b?action=share&source=collection_link&creator=43606001"
	},
	"item": [
		{
			"name": "Hello",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Null is in there\", function () {",
							"    let responseJson = pm.response.json();",
							"    pm.expect(responseJson.data.hello.currentuserid).to.eql(\"\");",
							"});",
							"",
							"pm.test(\"Save companyAccountId as referralUuid\", function () {",
							"    const response = pm.response.json();",
							"    const id = response.data?.hello?.companyAccountId;",
							"",
							"    pm.expect(id, \"companyAccountId should exist\").to.be.a(\"string\").that.is.not.empty;",
							"",
							"    pm.environment.set(\"referralUuid\", id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Hello {\n    hello {\n        currentuserid\n        currentVersion\n        wikiLink\n        lastMergedPullRequestNumber\n        companyAccountId\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration t1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid_t1\", response.data.register.userid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"email_t1\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register {\n  register(input: {\n    email: \"{{email_t1}}\",\n    password: \"{{password_T}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration t2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid_t2\", response.data.register.userid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"email_t2\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register {\n  register(input: {\n    email: \"{{email_t2}}\",\n    password: \"{{password_T}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration t3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid_t3\", response.data.register.userid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"email_t3\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register {\n  register(input: {\n    email: \"{{email_t3}}\",\n    password: \"{{password_T}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid_t4\", response.data.register.userid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"email_t4\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register {\n  register(input: {\n    email: \"{{email_t4}}\",\n    password: \"{{password_T}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration t5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10601\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.environment.set(\"userid_t5\", response.data.register.userid);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// generate random email",
							"let randomEmail = `user_${Math.floor(Math.random() * 1000000)}@example.com`;",
							"",
							"// save",
							"pm.environment.set(\"email_t5\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register {\n  register(input: {\n    email: \"{{email_t5}}\",\n    password: \"{{password_T}}\",\n    username: \"{{username}}\",\n    referralUuid: \"{{referralUuid}}\"\n  }) {\n    status\n    ResponseCode\n    userid\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification t1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid_t1}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification t2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification t3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid_t3}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid_t4}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification t5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10701\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation VerifiedAccount {\n    verifyAccount(userid: \"{{userid_t5}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(",
							"        responseText.includes(\"11513\") || responseText.includes(\"11508\")",
							"    ).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postResponse = {};",
							"try {",
							"    postResponse = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse response as JSON:\", err);",
							"}",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const postId = postResponse?.data?.createPost?.affectedRows?.id;",
							"        if (postId) {",
							"            pm.environment.set(\"postid\", postId);",
							"            console.log(\"postid set to:\", postId);",
							"        } else {",
							"            console.log(\"No postid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Couldn't access post ID:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping postid set.\");",
							"}",
							"",
							"let postResponseCode = \"\";",
							"try {",
							"    postResponseCode = postResponse?.data?.createPost?.ResponseCode || \"\";",
							"} catch (err) {",
							"    console.log(\"Couldn't access ResponseCode:\", err);",
							"}",
							"",
							"if (postResponseCode === \"11513\") {",
							"    pm.environment.set(\"isDailyFreePost\", \"true\");",
							"    console.log(\"This was a Daily Free Post (code 11513).\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreePost\");",
							"    console.log(\"Not a Daily Free Post (code not 11513).\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreatePost {\n    createPost(\n        input: {\n            title: \"moderation_post\"\n            media: [\"{{new_profile_pic}}\"]\n            mediadescription: \"{{invalid_email}}\"\n            contenttype: image\n        }\n        action: POST  \n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n         \n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let commentResponse = {};",
							"try {",
							"    commentResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let commentResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = commentResponse?.data?.createComment?.status || \"\";",
							"    commentResponseCode = commentResponse?.data?.createComment?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11605\", \"11608\"]).to.include(commentResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (commentResponseCode === \"11608\") {",
							"    pm.environment.set(\"isDailyFreeComment\", \"true\");",
							"    console.log(\"This was a Daily Free Comment.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeComment\");",
							"    console.log(\"Not a Daily Free Comment.\");",
							"}",
							"let response = {};",
							"try {",
							"    response = pm.response.json();",
							"} catch (err) {",
							"    console.log(\"Failed to parse JSON:\", err);",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    try {",
							"        const commentId = response?.data?.createComment?.affectedRows?.[0]?.commentid;",
							"        if (commentId) {",
							"            pm.environment.set(\"commentid\", commentId);",
							"            console.log(\"commentid set to:\", commentId);",
							"        } else {",
							"            console.log(\"No commentid found in response.\");",
							"        }",
							"    } catch (err) {",
							"        console.log(\"Error extracting commentid:\", err);",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping commentid set.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createComment {\n    createComment(action: COMMENT, postid: \"{{postid}}\", content: \"moderation_comment\") {\n        status\n        ResponseCode\n        affectedRows {\n            commentid\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report your post (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31508\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report your comment (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31607\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report yourself (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31009\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{userid_t4}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow t5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{userid_t5}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let likeResponse = {};",
							"try {",
							"    likeResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let likeResponseCode = \"\";",
							"let status = \"\";",
							"",
							"try {",
							"    status = likeResponse?.data?.resolvePostAction?.status || \"\";",
							"    likeResponseCode = likeResponse?.data?.resolvePostAction?.ResponseCode || \"\";",
							"} catch (e) {",
							"    console.log(\"Error accessing response properties:\", e);",
							"}",
							"",
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect([\"11503\", \"11514\"]).to.include(likeResponseCode);",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(status).to.eql(\"success\");",
							"});",
							"",
							"if (likeResponseCode === \"11514\") {",
							"    pm.environment.set(\"isDailyFreeLike\", \"true\");",
							"    console.log(\"This was a Daily Free Like.\");",
							"} else {",
							"    pm.environment.unset(\"isDailyFreeLike\");",
							"    console.log(\"Not a Daily Free Like.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: LIKE) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dislike post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11504\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(postid:\"{{postid}}\" , action: DISLIKE) {\n        status\n        ResponseCode\n    } \n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "View post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11506\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: VIEW\n    ) {\n        status\n        ResponseCode\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Like comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11603\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation LikeComment {\n    likeComment(commentid: \"{{commentid}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"const postCount = posts.length;",
							"let commentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        commentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"pm.environment.set(\"noFilter_post_count\", postCount);",
							"pm.environment.set(\"noFilter_comment_count\", commentCount);",
							"",
							"console.log(`Saved from unfiltered list: posts = ${postCount}, comments = ${commentCount}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t1}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Double report comment (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31605\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t2}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t3}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t4}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comment is still seen",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'moderation_comment'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"moderation_comment\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t5}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11604\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportComment {\n    reportComment(\n        commentid: \"{{commentid}}\"\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comment is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (MYGRANDMALIKES)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"const filteredPostCount = posts.length;",
							"let filteredCommentCount = 0;",
							"let hiddenCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        post.comments.forEach(comment => {",
							"            filteredCommentCount++;",
							"            if (comment.content === \"this comment is hidden\") {",
							"                hiddenCommentCount++;",
							"            }",
							"        });",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count is the same with and without filter\", function () {",
							"    pm.expect(filteredPostCount).to.eql(originalPostCount);",
							"});",
							"",
							"pm.test(\"Comment count is the same with and without filter\", function () {",
							"    pm.expect(filteredCommentCount).to.eql(originalCommentCount);",
							"});",
							"",
							"pm.test(\"Exactly one comment is marked as hidden\", function () {",
							"    pm.expect(hiddenCommentCount).to.eql(1);",
							"});",
							"",
							"console.log(`With filter: posts = ${filteredPostCount}, comments = ${filteredCommentCount}, hiddenComments = ${hiddenCommentCount}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (without filter)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"let currentPostCount = posts.length;",
							"let currentCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        currentCommentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentPostCount).to.eql(originalPostCount);",
							"});",
							"",
							"pm.test(\"Comment count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentCommentCount).to.eql(originalCommentCount);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Guest list post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const post = response.data?.guestListPost?.affectedRows;",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    const comments = post?.comments || [];",
							"    const commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GuestListPost {\n    guestListPost(postid: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountreports\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            url\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n                isfriend\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                amountreports\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Double report post (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31503\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t4}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comment is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comment is seen without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'moderation_comment'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"moderation_comment\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t3}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t2}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is still seen (feed)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is still seen (profile)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is still seen (title)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(title: \"moderation_post\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is still seen (postid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t1}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11505\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ResolveActionPost {\n    resolvePostAction(\n        postid: \"{{postid}}\"\n        action: REPORT\n    ) {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is not seen (feed)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Post is not there\", function () {",
							"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"postid\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (profile)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (title)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(title: \"moderation_post\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (postid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (MYGRANDMALIKES)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"let currentPostCount = posts.length;",
							"let currentCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        currentCommentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count dropped by exactly 1\", function () {",
							"    const diff = originalPostCount - currentPostCount;",
							"    pm.expect(diff).to.eql(1);",
							"});",
							"",
							"pm.test(\"Comment count dropped by exactly 1\", function () {",
							"    const diff = originalCommentCount - currentCommentCount;",
							"    pm.expect(diff).to.eql(1);",
							"});",
							"",
							"console.log(`Posts: ${originalPostCount} → ${currentPostCount}`);",
							"console.log(`Comments: ${originalCommentCount} → ${currentCommentCount}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (without filter)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"let currentPostCount = posts.length;",
							"let currentCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        currentCommentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentPostCount).to.eql(originalPostCount);",
							"});",
							"",
							"pm.test(\"Comment count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentCommentCount).to.eql(originalCommentCount);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Guest list post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const post = response.data?.guestListPost?.affectedRows;",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    const comments = post?.comments || [];",
							"    const commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const post = response.data?.guestListPost?.affectedRows;",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    if (!post || post.id !== expectedPostId) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(post.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GuestListPost {\n    guestListPost(postid: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountreports\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            url\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n                isfriend\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                amountreports\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Double report user (fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"31008\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"error\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t2}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is not seen (feed)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Post is not there\", function () {",
							"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"postid\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (profile)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (title)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(title: \"moderation_post\", contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is hidden (postid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(postid: \"{{postid}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm post is seen without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'moderation_comment'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found in any post.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"moderation_comment\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t3}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t4}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listPosts still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"All posts by w_userid_t2 have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        if (post.user?.id === expectedUserId) {",
							"            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"tester02\");",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"All comments by w_userid_t2 have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        const comments = post.comments || [];",
							"        comments.forEach(comment => {",
							"            if (comment.user?.id === expectedUserId) {",
							"                pm.expect(comment.user.username, `Comment ID ${comment.commentid} in post ${post.id} has correct username`)",
							"                    .to.eql(\"tester02\");",
							"            }",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listUsers still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listUsers has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.listUsers?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, username: \"tester02\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm getProfile still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11008\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"getProfile returns 'tester02' for w_userid_t2\", function () {",
							"    const response = pm.response.json();",
							"    const profile = response.data?.getProfile?.affectedRows;",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    if (!profile || profile.id !== expectedUserId) {",
							"        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
							"    }",
							"",
							"    pm.expect(profile.username, `User ${profile.id} should have username 'tester02'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFollowRelations still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11101\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in followers and following has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const relations = response.data?.listFollowRelations?.affectedRows || {};",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const checkList = (listName) => {",
							"        const list = relations[listName] || [];",
							"        const user = list.find(u => u.id === expectedUserId);",
							"",
							"        if (!user) {",
							"            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
							"        }",
							"",
							"        pm.expect(user.username, `User ${user.id} in ${listName} should be 'tester02'`).to.eql(\"tester02\");",
							"    };",
							"",
							"    checkList(\"followers\");",
							"    checkList(\"following\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFriends still shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11102\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listFriends has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const friends = response.data?.listFriends?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = friends.find(u => u.userid === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `Friend ${user.userid} should have username 'tester02'`).to.eql(\"tester02\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login t5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Login {\n  login(email: \"{{email_t5}}\",\n    password: \"{{password_T}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11104\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Account is not followed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"true\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserFollow {\n    toggleUserFollowStatus(userid: \"{{w_userid_t2}}\") {\n        status\n        isfollowing\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listPosts is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"All posts by w_userid_t2 have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        if (post.user?.id === expectedUserId) {",
							"            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"hidden_account\");",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"All comments by w_userid_t2 have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        const comments = post.comments || [];",
							"        comments.forEach(comment => {",
							"            if (comment.user?.id === expectedUserId) {",
							"                pm.expect(comment.user.username, `Comment ID ${comment.commentid} in post ${post.id} has correct username`)",
							"                    .to.eql(\"hidden_account\");",
							"            }",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listUsers is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listUsers has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.listUsers?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, username: \"tester02\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm getProfile is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11008\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"getProfile returns 'hidden_account' for w_userid_t2\", function () {",
							"    const response = pm.response.json();",
							"    const profile = response.data?.getProfile?.affectedRows;",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    if (!profile || profile.id !== expectedUserId) {",
							"        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
							"    }",
							"",
							"    pm.expect(profile.username, `User ${profile.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFollowRelations is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11101\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in followers and following has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const relations = response.data?.listFollowRelations?.affectedRows || {};",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const checkList = (listName) => {",
							"        const list = relations[listName] || [];",
							"        const user = list.find(u => u.id === expectedUserId);",
							"",
							"        if (!user) {",
							"            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
							"        }",
							"",
							"        pm.expect(user.username, `User ${user.id} in ${listName} should be 'hidden_account'`).to.eql(\"hidden_account\");",
							"    };",
							"",
							"    checkList(\"followers\");",
							"    checkList(\"following\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFriends is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11102\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listFriends has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const friends = response.data?.listFriends?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = friends.find(u => u.userid === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `Friend ${user.userid} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (MYGRANDMALIKES)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"let currentPostCount = posts.length;",
							"let currentCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        currentCommentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count dropped by exactly 1\", function () {",
							"    const diff = originalPostCount - currentPostCount;",
							"    pm.expect(diff).to.eql(1);",
							"});",
							"",
							"pm.test(\"Comment count dropped by exactly 1\", function () {",
							"    const diff = originalCommentCount - currentCommentCount;",
							"    pm.expect(diff).to.eql(1);",
							"});",
							"",
							"console.log(`Posts: ${originalPostCount} → ${currentPostCount}`);",
							"console.log(`Comments: ${originalCommentCount} → ${currentCommentCount}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "List post amount of objects (without filter)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"const json = pm.response.json();",
							"const posts = json?.data?.listPosts?.affectedRows || [];",
							"",
							"let currentPostCount = posts.length;",
							"let currentCommentCount = 0;",
							"",
							"posts.forEach(post => {",
							"    if (Array.isArray(post.comments)) {",
							"        currentCommentCount += post.comments.length;",
							"    }",
							"});",
							"",
							"const originalPostCount = parseInt(pm.environment.get(\"noFilter_post_count\"), 10);",
							"const originalCommentCount = parseInt(pm.environment.get(\"noFilter_comment_count\"), 10);",
							"",
							"pm.test(\"Post count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentPostCount).to.eql(originalPostCount);",
							"});",
							"",
							"pm.test(\"Comment count unchanged after comment report (unfiltered)\", function () {",
							"    pm.expect(currentCommentCount).to.eql(originalCommentCount);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Guest list post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'this comment is hidden' and username is 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const post = response.data?.guestListPost?.affectedRows;",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    const comments = post?.comments || [];",
							"    const commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"this comment is hidden\");",
							"    pm.expect(commentFound.user?.username, `Comment ${expectedCommentId} username`).to.eql(\"hidden_account\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'this post is hidden' and username is 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const post = response.data?.guestListPost?.affectedRows;",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    if (!post || post.id !== expectedPostId) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(post.title, `Post ${expectedPostId} title`).to.eql(\"this post is hidden\");",
							"    pm.expect(post.user?.username, `Post ${expectedPostId} username`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GuestListPost {\n    guestListPost(postid: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountreports\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            url\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n                isfriend\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                amountreports\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                    isfriend\n                }\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t2}}\",\n    password: \"{{w_password_t2}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listPosts shows urself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'moderation_comment' and username is 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"moderation_comment\");",
							"    pm.expect(commentFound.user?.username, `Comment ${expectedCommentId} username`).to.eql(\"tester02\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post' and username is 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"    pm.expect(postFound.user?.username, `Post ${expectedPostId} username`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listUsers shows urself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listUsers has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.listUsers?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser shows urself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser shows urself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, username: \"tester02\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm getProfile shows urself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11008\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"getProfile returns 'tester02' for w_userid_t2\", function () {",
							"    const response = pm.response.json();",
							"    const profile = response.data?.getProfile?.affectedRows;",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    if (!profile || profile.id !== expectedUserId) {",
							"        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
							"    }",
							"",
							"    pm.expect(profile.username, `User ${profile.id} should have username 'tester02'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11012\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ReportUser {\n    reportUser(userid: \"{{w_userid_t3}}\") {\n        status\n        ResponseCode\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t3}}\",\n    password: \"{{w_password_t3}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listPosts is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"All posts by w_userid_t2 have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        if (post.user?.id === expectedUserId) {",
							"            pm.expect(post.user.username, `Post ID ${post.id} has correct username`).to.eql(\"hidden_account\");",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"All comments by w_userid_t2 have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    posts.forEach(post => {",
							"        const comments = post.comments || [];",
							"        comments.forEach(comment => {",
							"            if (comment.user?.id === expectedUserId) {",
							"                pm.expect(comment.user.username, `Comment ID ${comment.commentid} in post ${post.id} has correct username`)",
							"                    .to.eql(\"hidden_account\");",
							"            }",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(contentFilterBy: MYGRANDMALIKES, limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listUsers is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listUsers has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.listUsers?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListUsers {\n    listUsers(contentFilterBy: MYGRANDMALIKES, limit: 20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(contentFilterBy: MYGRANDMALIKES, username: \"tester02\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm getProfile is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11008\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"getProfile returns 'hidden_account' for w_userid_t2\", function () {",
							"    const response = pm.response.json();",
							"    const profile = response.data?.getProfile?.affectedRows;",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    if (!profile || profile.id !== expectedUserId) {",
							"        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
							"    }",
							"",
							"    pm.expect(profile.username, `User ${profile.id} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\", contentFilterBy: MYGRANDMALIKES) {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFollowRelations is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11101\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in followers and following has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const relations = response.data?.listFollowRelations?.affectedRows || {};",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const checkList = (listName) => {",
							"        const list = relations[listName] || [];",
							"        const user = list.find(u => u.id === expectedUserId);",
							"",
							"        if (!user) {",
							"            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
							"        }",
							"",
							"        pm.expect(user.username, `User ${user.id} in ${listName} should be 'hidden_account'`).to.eql(\"hidden_account\");",
							"    };",
							"",
							"    checkList(\"followers\");",
							"    checkList(\"following\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFriends is hidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11102\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listFriends has username 'hidden_account'\", function () {",
							"    const response = pm.response.json();",
							"    const friends = response.data?.listFriends?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = friends.find(u => u.userid === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `Friend ${user.userid} should have username 'hidden_account'`).to.eql(\"hidden_account\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends(contentFilterBy: MYGRANDMALIKES) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listPosts shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11501\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Comment content for commentid from env is 'moderation_comment' and username is 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedCommentId = pm.environment.get(\"commentid\");",
							"",
							"    if (!expectedCommentId) {",
							"        throw new Error(\"Environment variable 'commentid' is not set.\");",
							"    }",
							"",
							"    let commentFound = null;",
							"",
							"    for (const post of posts) {",
							"        const comments = post.comments || [];",
							"        commentFound = comments.find(c => c.commentid === expectedCommentId);",
							"        if (commentFound) break;",
							"    }",
							"",
							"    if (!commentFound) {",
							"        throw new Error(`Comment with ID ${expectedCommentId} not found.`);",
							"    }",
							"",
							"    pm.expect(commentFound.content, `Comment ${expectedCommentId} content`).to.eql(\"moderation_comment\");",
							"    pm.expect(commentFound.user?.username, `Comment ${expectedCommentId} username`).to.eql(\"tester02\");",
							"});",
							"",
							"pm.test(\"Post title for postid from env is 'moderation_post' and username is 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const posts = response.data?.listPosts?.affectedRows || [];",
							"    const expectedPostId = pm.environment.get(\"postid\");",
							"",
							"    if (!expectedPostId) {",
							"        throw new Error(\"Environment variable 'postid' is not set.\");",
							"    }",
							"",
							"    const postFound = posts.find(p => p.id === expectedPostId);",
							"",
							"    if (!postFound) {",
							"        throw new Error(`Post with ID ${expectedPostId} not found.`);",
							"    }",
							"",
							"    pm.expect(postFound.title, `Post ${expectedPostId} title`).to.eql(\"moderation_post\");",
							"    pm.expect(postFound.user?.username, `Post ${expectedPostId} username`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListPosts {\n    listPosts(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            contenttype\n            title\n            media\n            cover\n            mediadescription\n            createdat\n            amountlikes\n            amountviews\n            amountcomments\n            amountdislikes\n            amounttrending\n            isliked\n            isviewed\n            isreported\n            isdisliked\n            issaved\n            tags\n            user {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            comments {\n                commentid\n                userid\n                postid\n                parentid\n                content\n                createdat\n                amountlikes\n                amountreplies\n                isliked\n                user {\n                    id\n                    username\n                    slug\n                    img\n                    isfollowed\n                    isfollowing\n                }\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listUsers shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listUsers has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.listUsers?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in listUsers response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should have username 'hidden_account'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListUsers {\n    listUsers(limit:20) {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(userid: \"{{w_userid_t2}}\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm searchUser shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11009\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User with w_userid_t2 should have username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data?.searchUser?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = users.find(u => u.id === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in searchUser response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `User ${user.id} should be hidden`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchUser {\n    searchUser(username: \"tester02\") {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            createdat\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm getProfile shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11008\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"getProfile returns 'tester02' for w_userid_t2\", function () {",
							"    const response = pm.response.json();",
							"    const profile = response.data?.getProfile?.affectedRows;",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    if (!profile || profile.id !== expectedUserId) {",
							"        throw new Error(`Profile ID does not match w_userid_t2. Found: ${profile?.id}, Expected: ${expectedUserId}`);",
							"    }",
							"",
							"    pm.expect(profile.username, `User ${profile.id} should have username 'tester02'`).to.eql(\"tester02\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProfile {\n    getProfile(userid: \"{{w_userid_t2}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            status\n            slug\n            img\n            biography\n            isfollowed\n            isfollowing\n            amountposts\n            amounttrending\n            amountfollowed\n            amountfollower\n            amountfriends\n            amountblocked\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFollowRelations shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11101\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in followers and following has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const relations = response.data?.listFollowRelations?.affectedRows || {};",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const checkList = (listName) => {",
							"        const list = relations[listName] || [];",
							"        const user = list.find(u => u.id === expectedUserId);",
							"",
							"        if (!user) {",
							"            throw new Error(`User with ID ${expectedUserId} not found in '${listName}' list.`);",
							"        }",
							"",
							"        pm.expect(user.username, `User ${user.id} in ${listName} should be 'tester02'`).to.eql(\"tester02\");",
							"    };",
							"",
							"    checkList(\"followers\");",
							"    checkList(\"following\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFollowRelations {\n    listFollowRelations {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            followers {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n            following {\n                id\n                username\n                slug\n                img\n                isfollowed\n                isfollowing\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm listFriends shows without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11102\");",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"User from w_userid_t2 in listFriends has username 'tester02'\", function () {",
							"    const response = pm.response.json();",
							"    const friends = response.data?.listFriends?.affectedRows || [];",
							"    const expectedUserId = pm.environment.get(\"w_userid_t2\");",
							"",
							"    if (!expectedUserId) {",
							"        throw new Error(\"Environment variable 'w_userid_t2' is not set.\");",
							"    }",
							"",
							"    const user = friends.find(u => u.userid === expectedUserId);",
							"",
							"    if (!user) {",
							"        throw new Error(`User with ID ${expectedUserId} not found in 'listFriends' response.`);",
							"    }",
							"",
							"    pm.expect(user.username, `Friend ${user.userid} should have username 'tester02'`).to.eql(\"tester02\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListFriends {\n    listFriends {\n        status\n        counter\n        ResponseCode\n        affectedRows {\n            userid\n            img\n            username\n            slug\n            biography\n            updatedat\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login tester 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"10801\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let response = pm.response.json();",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"accessToken\", response.data.login.accessToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"if (!pm.response.text().includes(\"error\")) {",
							"    pm.environment.set(\"refreshToken\", response.data.login.refreshToken);",
							"} else {",
							"    console.log(\"Error detected in response, environment variable not set.\");",
							"}",
							"let token = pm.environment.get(\"accessToken\");",
							"pm.test(\"Access token exists\", function () {",
							"    pm.expect(token).to.be.a(\"string\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n  login(email: \"{{w_email_t1}}\",\n    password: \"{{w_password_t1}}\"\n  ) {\n    status\n    ResponseCode\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Moderation stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12101\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ModerationStats {\n    moderationStats {\n        status\n        ResponseCode\n        affectedRows {\n            AmountAwaitingReview\n            AmountHidden\n            AmountRestored\n            AmountIllegal\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Moderation items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12102\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Save targetContentIds by env IDs\", function () {",
							"    const response = pm.response.json();",
							"    const items = response.data?.moderationItems?.affectedRows || [];",
							"",
							"    const postIdEnv = pm.environment.get(\"postid\");",
							"    const commentIdEnv = pm.environment.get(\"commentid\");",
							"    const userIdT2 = pm.environment.get(\"w_userid_t2\");",
							"    const userIdT3 = pm.environment.get(\"w_userid_t3\");",
							"",
							"    if (!postIdEnv || !commentIdEnv || !userIdT2 || !userIdT3) {",
							"        throw new Error(\"One of the required environment variables (postid, commentid, w_userid_t2, w_userid_t3) is not set.\");",
							"    }",
							"",
							"    items.forEach(item => {",
							"        const type = item.targettype;",
							"        const id = item.targetContentId;",
							"",
							"        if (!id) return;",
							"",
							"        if (type === \"post\" && item.targetcontent?.post?.id === postIdEnv) {",
							"            pm.environment.set(\"targetContentIdPost\", id);",
							"        } else if (type === \"comment\" && item.targetcontent?.comment?.commentid === commentIdEnv) {",
							"            pm.environment.set(\"targetContentIdComment\", id);",
							"        } else if (type === \"user\") {",
							"            const userId = item.targetcontent?.user?.userid;",
							"            if (userId === userIdT2) {",
							"                pm.environment.set(\"targetContentIdT02\", id);",
							"            } else if (userId === userIdT3) {",
							"                pm.environment.set(\"targetContentIdT03\", id);",
							"            }",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"Check statuses by env IDs\", function () {",
							"    const response = pm.response.json();",
							"    const items = response.data?.moderationItems?.affectedRows || [];",
							"",
							"    const postIdEnv = pm.environment.get(\"postid\");",
							"    const commentIdEnv = pm.environment.get(\"commentid\");",
							"    const userIdT2 = pm.environment.get(\"w_userid_t2\");",
							"    const userIdT3 = pm.environment.get(\"w_userid_t3\");",
							"",
							"    items.forEach(item => {",
							"        const type = item.targettype;",
							"        const id = item.targetContentId;",
							"",
							"        if (type === \"post\" && item.targetcontent?.post?.id === postIdEnv) {",
							"            pm.expect(item.status, `Post ${postIdEnv} status`).to.eql(\"hidden\");",
							"        } else if (type === \"comment\" && item.targetcontent?.comment?.commentid === commentIdEnv) {",
							"            pm.expect(item.status, `Comment ${commentIdEnv} status`).to.eql(\"hidden\");",
							"        } else if (type === \"user\") {",
							"            const userId = item.targetcontent?.user?.userid;",
							"            if (userId === userIdT2) {",
							"                pm.expect(item.status, `User ${userIdT2} status`).to.eql(\"hidden\");",
							"            } else if (userId === userIdT3) {",
							"                pm.expect(item.status, `User ${userIdT3} status`).to.eql(\"waiting_for_review\");",
							"            }",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ModerationItems {\n    moderationItems {\n        status\n        ResponseCode\n        affectedRows {\n            targetContentId\n            targettype\n            reportscount\n            status\n            createdat\n            targetcontent {\n                post {\n                    id\n                    contenttype\n                    title\n                    media\n                    cover\n                    mediadescription\n                    createdat\n                    amountreports\n                    amountlikes\n                    amountviews\n                    amountcomments\n                    amountdislikes\n                    amounttrending\n                    isliked\n                    isviewed\n                    isreported\n                    isdisliked\n                    issaved\n                    tags\n                    url\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                    comments {\n                        commentid\n                        userid\n                        postid\n                        parentid\n                        content\n                        createdat\n                        amountlikes\n                        amountreplies\n                        amountreports\n                        isliked\n                        user {\n                            id\n                            username\n                            slug\n                            img\n                            isfollowed\n                            isfollowing\n                            isfriend\n                        }\n                    }\n                }\n                comment {\n                    commentid\n                    userid\n                    postid\n                    parentid\n                    content\n                    createdat\n                    amountlikes\n                    amountreplies\n                    amountreports\n                    isliked\n                    user {\n                        id\n                        username\n                        slug\n                        img\n                        isfollowed\n                        isfollowing\n                        isfriend\n                    }\n                }\n                user {\n                    userid\n                    img\n                    username\n                    slug\n                    biography\n                    updatedat\n                }\n            }\n            reporters {\n                userid\n                img\n                username\n                slug\n                biography\n                updatedat\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Perform moderation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"12103\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation PerformModeration {\n    performModeration(targetContentId: \"{{targetContentIdT03}}\", moderationAction: hidden) {\n        status\n        RequestId\n        ResponseCode\n        ResponseMessage\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm likes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"hidden_account\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is hidden_account\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: LIKE, contentFilterBy: MYGRANDMALIKES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm dislikes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"hidden_account\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is hidden_account\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: DISLIKE, contentFilterBy: MYGRANDMALIKES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm views",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"hidden_account\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is hidden_account\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: VIEW, contentFilterBy: MYGRANDMALIKES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comments likes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"hidden_account\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is hidden_account\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: COMMENTLIKE, contentFilterBy: MYGRANDMALIKES, postOrCommentId: \"{{commentid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm likes without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"tester03\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is tester03\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: LIKE, contentFilterBy: MYGRANDMAHATES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm dislikes without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"tester03\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is tester03\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: DISLIKE, contentFilterBy: MYGRANDMAHATES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm views without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"tester03\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is tester03\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: VIEW, contentFilterBy: MYGRANDMAHATES, postOrCommentId: \"{{postid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm comments likes without filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.includes(\"11205\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"let postInteractionResponse = {};",
							"try {",
							"    postInteractionResponse = pm.response.json();",
							"} catch (e) {",
							"    console.log(\"Failed to parse JSON:\", e);",
							"}",
							"",
							"let affectedRow = postInteractionResponse?.data?.postInteractions?.affectedRows?.[0] || {};",
							"",
							"if (!pm.response.text().includes(\"error\")) {",
							"    const expectedId = pm.environment.get(\"w_userid_t3\");",
							"    const expectedUsername = \"tester03\";",
							"",
							"    if (affectedRow?.id) {",
							"        pm.test(\"Affected user ID matches w_userid_t3\", function () {",
							"            pm.expect(affectedRow.id).to.eql(expectedId);",
							"        });",
							"        pm.test(\"Username is tester03\", function () {",
							"            pm.expect(affectedRow.username).to.eql(expectedUsername);",
							"        });",
							"",
							"        console.log(\"Affected ID:\", affectedRow.id);",
							"        console.log(\"Username:\", affectedRow.username);",
							"    } else {",
							"        console.log(\"No affected row found.\");",
							"    }",
							"} else {",
							"    console.log(\"Error detected in response, skipping tests.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query PostInteractions {\n    postInteractions(getOnly: COMMENTLIKE, contentFilterBy: MYGRANDMAHATES, postOrCommentId: \"{{commentid}}\") {\n        status\n        ResponseCode\n        affectedRows {\n            id\n            username\n            slug\n            img\n            isfollowed\n            isfollowing\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check contentFilteringSeverityLevel = null\", function () {",
							"    const response = pm.response.json();",
							"    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
							"",
							"    pm.expect(level, \"contentFilteringSeverityLevel should be null\")",
							"        .to.eql(null);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11014\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMAHATES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check contentFilteringSeverityLevel = MYGRANDMAHATES\", function () {",
							"    const response = pm.response.json();",
							"    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
							"",
							"    pm.expect(level, \"contentFilteringSeverityLevel should be MYGRANDMAHATES\")",
							"        .to.eql(\"MYGRANDMAHATES\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11014\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMALIKES }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check contentFilteringSeverityLevel = MYGRANDMALIKES\", function () {",
							"    const response = pm.response.json();",
							"    const level = response?.data?.getUserInfo?.affectedRows?.userPreferences?.contentFilteringSeverityLevel;",
							"",
							"    pm.expect(level, \"contentFilteringSeverityLevel should be MYGRANDMALIKES\")",
							"        .to.eql(\"MYGRANDMALIKES\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11014\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check onboardingsWereShown contains INTROONBOARDING\", function () {",
							"    const response = pm.response.json();",
							"    const onboardings = response?.data?.updateUserPreferences?.affectedRows?.onboardingsWereShown;",
							"",
							"    pm.expect(onboardings, \"onboardingsWereShown should be an array\").to.be.an(\"array\");",
							"    pm.expect(onboardings, \"onboardingsWereShown should include INTROONBOARDING\")",
							"        .to.include(\"INTROONBOARDING\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateUserPreferences {\n    updateUserPreferences(\n        userPreferences: { contentFilteringSeverityLevel: MYGRANDMALIKES, shownOnboardings: INTROONBOARDING }\n    ) {\n        status\n        ResponseCode\n        affectedRows {\n            contentFilteringSeverityLevel\n            onboardingsWereShown\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check preferences",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ResponseCode is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"11002\");",
							"});",
							"pm.test(\"Status is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"status\":\"success\"');",
							"});",
							"",
							"pm.test(\"Check onboardingsWereShown contains INTROONBOARDING\", function () {",
							"    const response = pm.response.json();",
							"    const onboardings = pm.response.json()?.data?.getUserInfo?.affectedRows?.userPreferences?.onboardingsWereShown;",
							"",
							"    pm.expect(onboardings, \"onboardingsWereShown should be an array\").to.be.an(\"array\");",
							"    pm.expect(onboardings, \"onboardingsWereShown should include INTROONBOARDING\")",
							"        .to.include(\"INTROONBOARDING\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserInfo {\n    getUserInfo {\n        status\n        ResponseCode\n        affectedRows {\n            userid\n            liquidity\n            amountposts\n            amountblocked\n            amountfollower\n            amountfollowed\n            amountfriends\n            invited\n            updatedat\n            userPreferences {\n                contentFilteringSeverityLevel\n                onboardingsWereShown\n            }\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://peer-network.eu/graphql",
					"protocol": "https",
					"host": [
						"peer-network",
						"eu"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let accessToken = pm.environment.get(\"accessToken\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Query is successful\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}